/**
 * ChronosDB swagger
 * ChronosDB Analytics server
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WSeries from './WSeries';

/**
 * The VARParameters model module.
 * @module model/VARParameters
 * @version 0.1
 */
class VARParameters {
    /**
     * Constructs a new <code>VARParameters</code>.
     * @alias module:model/VARParameters
     */
    constructor() { 
        
        VARParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VARParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VARParameters} obj Optional instance to populate.
     * @return {module:model/VARParameters} The populated <code>VARParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VARParameters();

            if (data.hasOwnProperty('endogenous')) {
                obj['endogenous'] = ApiClient.convertToType(data['endogenous'], [WSeries]);
            }
            if (data.hasOwnProperty('exogenous')) {
                obj['exogenous'] = ApiClient.convertToType(data['exogenous'], [WSeries]);
            }
            if (data.hasOwnProperty('maxlags')) {
                obj['maxlags'] = ApiClient.convertToType(data['maxlags'], 'Number');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('ic')) {
                obj['ic'] = ApiClient.convertToType(data['ic'], 'String');
            }
            if (data.hasOwnProperty('trend')) {
                obj['trend'] = ApiClient.convertToType(data['trend'], 'String');
            }
            if (data.hasOwnProperty('dropna')) {
                obj['dropna'] = ApiClient.convertToType(data['dropna'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Endogenous response variables
 * @member {Array.<module:model/WSeries>} endogenous
 */
VARParameters.prototype['endogenous'] = undefined;

/**
 * Exogenous variables
 * @member {Array.<module:model/WSeries>} exogenous
 */
VARParameters.prototype['exogenous'] = undefined;

/**
 * Maximum number of lags to check for order selection.
 * @member {Number} maxlags
 */
VARParameters.prototype['maxlags'] = undefined;

/**
 * Estimation method: ‘ols’ : OLS. 
 * @member {module:model/VARParameters.MethodEnum} method
 */
VARParameters.prototype['method'] = undefined;

/**
 * Model selection criterion: ‘aic’ : Akaike Information Criterion. ‘fpe’ : Final prediction error. ‘hqic’ : Hannan-Quinn Information Criterion. ‘bic’ : Bayesian Information Criterion. `default` : use default value of 12 * (nobs/100.)**(1./4) 
 * @member {module:model/VARParameters.IcEnum} ic
 * @default 'default'
 */
VARParameters.prototype['ic'] = 'default';

/**
 * The trend to include in the model: ‘nc’ : no trend. ‘c’ : constant only (default). ‘ct’ : constant and time trend. ‘ctt’ : constant, linear, and quadratic time trend. 
 * @member {module:model/VARParameters.TrendEnum} trend
 */
VARParameters.prototype['trend'] = undefined;

/**
 * Drop missing values; any observations with NaNs are dropped.
 * @member {Boolean} dropna
 */
VARParameters.prototype['dropna'] = undefined;





/**
 * Allowed values for the <code>method</code> property.
 * @enum {String}
 * @readonly
 */
VARParameters['MethodEnum'] = {

    /**
     * value: "ols"
     * @const
     */
    "ols": "ols"
};


/**
 * Allowed values for the <code>ic</code> property.
 * @enum {String}
 * @readonly
 */
VARParameters['IcEnum'] = {

    /**
     * value: "aic"
     * @const
     */
    "aic": "aic",

    /**
     * value: "fpe"
     * @const
     */
    "fpe": "fpe",

    /**
     * value: "hqic"
     * @const
     */
    "hqic": "hqic",

    /**
     * value: "bic"
     * @const
     */
    "bic": "bic",

    /**
     * value: "default"
     * @const
     */
    "default": "default"
};


/**
 * Allowed values for the <code>trend</code> property.
 * @enum {String}
 * @readonly
 */
VARParameters['TrendEnum'] = {

    /**
     * value: "nc"
     * @const
     */
    "nc": "nc",

    /**
     * value: "c"
     * @const
     */
    "c": "c",

    /**
     * value: "ct"
     * @const
     */
    "ct": "ct",

    /**
     * value: "ctt"
     * @const
     */
    "ctt": "ctt"
};



export default VARParameters;

