/**
 * ChronosDB swagger
 * ChronosDB Analytics server
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WSeries from './WSeries';

/**
 * The ARParameters model module.
 * @module model/ARParameters
 * @version 0.1
 */
class ARParameters {
    /**
     * Constructs a new <code>ARParameters</code>.
     * @alias module:model/ARParameters
     */
    constructor() { 
        
        ARParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ARParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ARParameters} obj Optional instance to populate.
     * @return {module:model/ARParameters} The populated <code>ARParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ARParameters();

            if (data.hasOwnProperty('nlags')) {
                obj['nlags'] = ApiClient.convertToType(data['nlags'], 'Number');
            }
            if (data.hasOwnProperty('lags')) {
                obj['lags'] = ApiClient.convertToType(data['lags'], ['Number']);
            }
            if (data.hasOwnProperty('trend')) {
                obj['trend'] = ApiClient.convertToType(data['trend'], 'String');
            }
            if (data.hasOwnProperty('dependent')) {
                obj['dependent'] = WSeries.constructFromObject(data['dependent']);
            }
            if (data.hasOwnProperty('exogs')) {
                obj['exogs'] = ApiClient.convertToType(data['exogs'], [WSeries]);
            }
            if (data.hasOwnProperty('dropna')) {
                obj['dropna'] = ApiClient.convertToType(data['dropna'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} nlags
 */
ARParameters.prototype['nlags'] = undefined;

/**
 * @member {Array.<Number>} lags
 */
ARParameters.prototype['lags'] = undefined;

/**
 * The trend to include in the model: ‘nc’ : no trend. ‘c’ : constant only (default). ‘ct’ : constant and time trend. ‘t’ : time trend only. 
 * @member {module:model/ARParameters.TrendEnum} trend
 */
ARParameters.prototype['trend'] = undefined;

/**
 * @member {module:model/WSeries} dependent
 */
ARParameters.prototype['dependent'] = undefined;

/**
 * array_like, A nobs x k array where nobs is the number of observations and k is the number of regressors. An intercept is not included by default and should be added by the user. See statsmodels.tools.add_constant.
 * @member {Array.<module:model/WSeries>} exogs
 */
ARParameters.prototype['exogs'] = undefined;

/**
 * Drop missing values; any observations with NaNs are dropped.
 * @member {Boolean} dropna
 */
ARParameters.prototype['dropna'] = undefined;





/**
 * Allowed values for the <code>trend</code> property.
 * @enum {String}
 * @readonly
 */
ARParameters['TrendEnum'] = {

    /**
     * value: "nc"
     * @const
     */
    "nc": "nc",

    /**
     * value: "c"
     * @const
     */
    "c": "c",

    /**
     * value: "ct"
     * @const
     */
    "ct": "ct",

    /**
     * value: "t"
     * @const
     */
    "t": "t"
};



export default ARParameters;

