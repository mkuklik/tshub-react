/**
 * ChronosDB swagger
 * ChronosDB Analytics server
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WSeries from './WSeries';

/**
 * The LMParameters model module.
 * @module model/LMParameters
 * @version 0.1
 */
class LMParameters {
    /**
     * Constructs a new <code>LMParameters</code>.
     * @alias module:model/LMParameters
     */
    constructor() { 
        
        LMParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LMParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LMParameters} obj Optional instance to populate.
     * @return {module:model/LMParameters} The populated <code>LMParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LMParameters();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('dependent')) {
                obj['dependent'] = WSeries.constructFromObject(data['dependent']);
            }
            if (data.hasOwnProperty('regressors')) {
                obj['regressors'] = ApiClient.convertToType(data['regressors'], [WSeries]);
            }
            if (data.hasOwnProperty('dropna')) {
                obj['dropna'] = ApiClient.convertToType(data['dropna'], 'Boolean');
            }
            if (data.hasOwnProperty('addconst')) {
                obj['addconst'] = ApiClient.convertToType(data['addconst'], 'Boolean');
            }
            if (data.hasOwnProperty('hasconst')) {
                obj['hasconst'] = ApiClient.convertToType(data['hasconst'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/LMParameters.KindEnum} kind
 */
LMParameters.prototype['kind'] = undefined;

/**
 * @member {module:model/WSeries} dependent
 */
LMParameters.prototype['dependent'] = undefined;

/**
 * array_like, A nobs x k array where nobs is the number of observations and k is the number of regressors. An intercept is not included by default and should be added by the user. See statsmodels.tools.add_constant.
 * @member {Array.<module:model/WSeries>} regressors
 */
LMParameters.prototype['regressors'] = undefined;

/**
 * Drop missing values; any observations with NaNs are dropped.
 * @member {Boolean} dropna
 */
LMParameters.prototype['dropna'] = undefined;

/**
 * Add constant to regressors, i.e. column of ones
 * @member {Boolean} addconst
 * @default true
 */
LMParameters.prototype['addconst'] = true;

/**
 * Indicates whether the RHS includes a user-supplied constant. If True, a constant is not checked for and k_constant is set to 1 and all result statistics are calculated as if a constant is present. If False, a constant is not checked for and k_constant is set to 0.
 * @member {Boolean} hasconst
 * @default true
 */
LMParameters.prototype['hasconst'] = true;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
LMParameters['KindEnum'] = {

    /**
     * value: "ols"
     * @const
     */
    "ols": "ols",

    /**
     * value: "gls"
     * @const
     */
    "gls": "gls",

    /**
     * value: "wls"
     * @const
     */
    "wls": "wls",

    /**
     * value: "glsar"
     * @const
     */
    "glsar": "glsar"
};



export default LMParameters;

