/**
 * ChronosDB swagger
 * ChronosDB Analytics server
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Histogram from './Histogram';
import Sample from './Sample';

/**
 * The DescriptiveResult model module.
 * @module model/DescriptiveResult
 * @version 0.1
 */
class DescriptiveResult {
    /**
     * Constructs a new <code>DescriptiveResult</code>.
     * @alias module:model/DescriptiveResult
     */
    constructor() { 
        
        DescriptiveResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescriptiveResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescriptiveResult} obj Optional instance to populate.
     * @return {module:model/DescriptiveResult} The populated <code>DescriptiveResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescriptiveResult();

            if (data.hasOwnProperty('nobs')) {
                obj['nobs'] = ApiClient.convertToType(data['nobs'], 'Number');
            }
            if (data.hasOwnProperty('mean')) {
                obj['mean'] = ApiClient.convertToType(data['mean'], 'Number');
            }
            if (data.hasOwnProperty('median')) {
                obj['median'] = ApiClient.convertToType(data['median'], 'Number');
            }
            if (data.hasOwnProperty('min')) {
                obj['min'] = ApiClient.convertToType(data['min'], 'Number');
            }
            if (data.hasOwnProperty('max')) {
                obj['max'] = ApiClient.convertToType(data['max'], 'Number');
            }
            if (data.hasOwnProperty('sum')) {
                obj['sum'] = ApiClient.convertToType(data['sum'], 'Number');
            }
            if (data.hasOwnProperty('percentiles')) {
                obj['percentiles'] = ApiClient.convertToType(data['percentiles'], Object);
            }
            if (data.hasOwnProperty('std')) {
                obj['std'] = ApiClient.convertToType(data['std'], 'Number');
            }
            if (data.hasOwnProperty('mad')) {
                obj['mad'] = ApiClient.convertToType(data['mad'], 'Number');
            }
            if (data.hasOwnProperty('jb')) {
                obj['jb'] = ApiClient.convertToType(data['jb'], 'Number');
            }
            if (data.hasOwnProperty('jbpv')) {
                obj['jbpv'] = ApiClient.convertToType(data['jbpv'], 'Number');
            }
            if (data.hasOwnProperty('skew')) {
                obj['skew'] = ApiClient.convertToType(data['skew'], 'Number');
            }
            if (data.hasOwnProperty('kurtosis')) {
                obj['kurtosis'] = ApiClient.convertToType(data['kurtosis'], 'Number');
            }
            if (data.hasOwnProperty('histogram')) {
                obj['histogram'] = Histogram.constructFromObject(data['histogram']);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('sample')) {
                obj['sample'] = Sample.constructFromObject(data['sample']);
            }
        }
        return obj;
    }


}

/**
 * @member {Number} nobs
 */
DescriptiveResult.prototype['nobs'] = undefined;

/**
 * @member {Number} mean
 */
DescriptiveResult.prototype['mean'] = undefined;

/**
 * @member {Number} median
 */
DescriptiveResult.prototype['median'] = undefined;

/**
 * @member {Number} min
 */
DescriptiveResult.prototype['min'] = undefined;

/**
 * @member {Number} max
 */
DescriptiveResult.prototype['max'] = undefined;

/**
 * @member {Number} sum
 */
DescriptiveResult.prototype['sum'] = undefined;

/**
 * @member {Object} percentiles
 */
DescriptiveResult.prototype['percentiles'] = undefined;

/**
 * @member {Number} std
 */
DescriptiveResult.prototype['std'] = undefined;

/**
 * @member {Number} mad
 */
DescriptiveResult.prototype['mad'] = undefined;

/**
 * @member {Number} jb
 */
DescriptiveResult.prototype['jb'] = undefined;

/**
 * @member {Number} jbpv
 */
DescriptiveResult.prototype['jbpv'] = undefined;

/**
 * @member {Number} skew
 */
DescriptiveResult.prototype['skew'] = undefined;

/**
 * @member {Number} kurtosis
 */
DescriptiveResult.prototype['kurtosis'] = undefined;

/**
 * @member {module:model/Histogram} histogram
 */
DescriptiveResult.prototype['histogram'] = undefined;

/**
 * @member {Date} timestamp
 */
DescriptiveResult.prototype['timestamp'] = undefined;

/**
 * @member {module:model/Sample} sample
 */
DescriptiveResult.prototype['sample'] = undefined;






export default DescriptiveResult;

