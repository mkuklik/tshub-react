/**
 * ChronosDB swagger
 * ChronosDB Analytics server
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WSeries from './WSeries';

/**
 * The BKFilterParameters model module.
 * @module model/BKFilterParameters
 * @version 0.1
 */
class BKFilterParameters {
    /**
     * Constructs a new <code>BKFilterParameters</code>.
     * Paramteres for Baxter-King bandpass filter.
     * @alias module:model/BKFilterParameters
     */
    constructor() { 
        
        BKFilterParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BKFilterParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BKFilterParameters} obj Optional instance to populate.
     * @return {module:model/BKFilterParameters} The populated <code>BKFilterParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BKFilterParameters();

            if (data.hasOwnProperty('x')) {
                obj['x'] = WSeries.constructFromObject(data['x']);
            }
            if (data.hasOwnProperty('low')) {
                obj['low'] = ApiClient.convertToType(data['low'], 'Number');
            }
            if (data.hasOwnProperty('high')) {
                obj['high'] = ApiClient.convertToType(data['high'], 'Number');
            }
            if (data.hasOwnProperty('k')) {
                obj['k'] = ApiClient.convertToType(data['k'], 'Number');
            }
            if (data.hasOwnProperty('dropna')) {
                obj['dropna'] = ApiClient.convertToType(data['dropna'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/WSeries} x
 */
BKFilterParameters.prototype['x'] = undefined;

/**
 * Minimum period for oscillations, ie., Baxter and King suggest that the Burns-Mitchell U.S. business cycle has 6 for quarterly data and 1.5 for annual data.
 * @member {Number} low
 */
BKFilterParameters.prototype['low'] = undefined;

/**
 * Maximum period for oscillations BK suggest that the U.S. business cycle has 32 for quarterly data and 8 for annual data.
 * @member {Number} high
 */
BKFilterParameters.prototype['high'] = undefined;

/**
 * Lead-lag length of the filter. Baxter and King propose a truncation length of 12 for quarterly data and 3 for annual data.
 * @member {Number} k
 */
BKFilterParameters.prototype['k'] = undefined;

/**
 * Drop missing values; any observations with NaNs are dropped.
 * @member {Boolean} dropna
 */
BKFilterParameters.prototype['dropna'] = undefined;






export default BKFilterParameters;

