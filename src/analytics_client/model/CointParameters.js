/**
 * ChronosDB swagger
 * ChronosDB Analytics server
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WSeries from './WSeries';

/**
 * The CointParameters model module.
 * @module model/CointParameters
 * @version 0.1
 */
class CointParameters {
    /**
     * Constructs a new <code>CointParameters</code>.
     * @alias module:model/CointParameters
     */
    constructor() { 
        
        CointParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CointParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CointParameters} obj Optional instance to populate.
     * @return {module:model/CointParameters} The populated <code>CointParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CointParameters();

            if (data.hasOwnProperty('x')) {
                obj['x'] = WSeries.constructFromObject(data['x']);
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = WSeries.constructFromObject(data['y']);
            }
            if (data.hasOwnProperty('maxlag')) {
                obj['maxlag'] = ApiClient.convertToType(data['maxlag'], 'Number');
            }
            if (data.hasOwnProperty('regression')) {
                obj['regression'] = ApiClient.convertToType(data['regression'], 'String');
            }
            if (data.hasOwnProperty('autolag')) {
                obj['autolag'] = ApiClient.convertToType(data['autolag'], 'String');
            }
            if (data.hasOwnProperty('dropna')) {
                obj['dropna'] = ApiClient.convertToType(data['dropna'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/WSeries} x
 */
CointParameters.prototype['x'] = undefined;

/**
 * @member {module:model/WSeries} y
 */
CointParameters.prototype['y'] = undefined;

/**
 * Maximum lag which is included in test, default 12*(nobs/100)^{1/4}.
 * @member {Number} maxlag
 */
CointParameters.prototype['maxlag'] = undefined;

/**
 * Constant and trend order to include in regression. ‘c’ : constant only (default). ‘ct’ : constant and trend. 
 * @member {module:model/CointParameters.RegressionEnum} regression
 * @default 'c'
 */
CointParameters.prototype['regression'] = 'c';

/**
 * Method to use when automatically determining the lag.
 * @member {module:model/CointParameters.AutolagEnum} autolag
 * @default 'AIC'
 */
CointParameters.prototype['autolag'] = 'AIC';

/**
 * Drop missing values; any observations with NaNs are dropped.
 * @member {Boolean} dropna
 */
CointParameters.prototype['dropna'] = undefined;





/**
 * Allowed values for the <code>regression</code> property.
 * @enum {String}
 * @readonly
 */
CointParameters['RegressionEnum'] = {

    /**
     * value: "c"
     * @const
     */
    "c": "c",

    /**
     * value: "ct"
     * @const
     */
    "ct": "ct"
};


/**
 * Allowed values for the <code>autolag</code> property.
 * @enum {String}
 * @readonly
 */
CointParameters['AutolagEnum'] = {

    /**
     * value: "AIC"
     * @const
     */
    "AIC": "AIC",

    /**
     * value: "BIC"
     * @const
     */
    "BIC": "BIC",

    /**
     * value: "t-stat"
     * @const
     */
    "t-stat": "t-stat",

    /**
     * value: "maxlag"
     * @const
     */
    "maxlag": "maxlag"
};



export default CointParameters;

