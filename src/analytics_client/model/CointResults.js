/**
 * ChronosDB swagger
 * ChronosDB Analytics server
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CointResults model module.
 * @module model/CointResults
 * @version 0.1
 */
class CointResults {
    /**
     * Constructs a new <code>CointResults</code>.
     * @alias module:model/CointResults
     */
    constructor() { 
        
        CointResults.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CointResults</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CointResults} obj Optional instance to populate.
     * @return {module:model/CointResults} The populated <code>CointResults</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CointResults();

            if (data.hasOwnProperty('stat')) {
                obj['stat'] = ApiClient.convertToType(data['stat'], 'Number');
            }
            if (data.hasOwnProperty('pvalue')) {
                obj['pvalue'] = ApiClient.convertToType(data['pvalue'], 'Number');
            }
            if (data.hasOwnProperty('critical')) {
                obj['critical'] = ApiClient.convertToType(data['critical'], {'String': Object});
            }
            if (data.hasOwnProperty('usedlag')) {
                obj['usedlag'] = ApiClient.convertToType(data['usedlag'], 'Number');
            }
            if (data.hasOwnProperty('nobs')) {
                obj['nobs'] = ApiClient.convertToType(data['nobs'], 'Number');
            }
            if (data.hasOwnProperty('icbest')) {
                obj['icbest'] = ApiClient.convertToType(data['icbest'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * t-statistics of unit-root test
 * @member {Number} stat
 */
CointResults.prototype['stat'] = undefined;

/**
 * MacKinnonâ€™s approximate p-value based on MacKinnon (1994, 2010)
 * @member {Number} pvalue
 */
CointResults.prototype['pvalue'] = undefined;

/**
 * Critical values for the test statistic at the 1 %, 5 %, and 10 % levels. Based on MacKinnon (2010).
 * @member {Object.<String, Object>} critical
 */
CointResults.prototype['critical'] = undefined;

/**
 * number of lags used
 * @member {Number} usedlag
 */
CointResults.prototype['usedlag'] = undefined;

/**
 * number of observations
 * @member {Number} nobs
 */
CointResults.prototype['nobs'] = undefined;

/**
 * the value of the best information criterio if used
 * @member {Number} icbest
 */
CointResults.prototype['icbest'] = undefined;






export default CointResults;

