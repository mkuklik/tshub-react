/**
 * ChronosDB swagger
 * ChronosDB Analytics server
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WSeries from './WSeries';

/**
 * The LMResult model module.
 * @module model/LMResult
 * @version 0.1
 */
class LMResult {
    /**
     * Constructs a new <code>LMResult</code>.
     * @alias module:model/LMResult
     */
    constructor() { 
        
        LMResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LMResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LMResult} obj Optional instance to populate.
     * @return {module:model/LMResult} The populated <code>LMResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LMResult();

            if (data.hasOwnProperty('ayid')) {
                obj['ayid'] = ApiClient.convertToType(data['ayid'], 'String');
            }
            if (data.hasOwnProperty('mid')) {
                obj['mid'] = ApiClient.convertToType(data['mid'], 'String');
            }
            if (data.hasOwnProperty('coeff')) {
                obj['coeff'] = ApiClient.convertToType(data['coeff'], {'String': Object});
            }
            if (data.hasOwnProperty('df')) {
                obj['df'] = ApiClient.convertToType(data['df'], 'Number');
            }
            if (data.hasOwnProperty('df_resid')) {
                obj['df_resid'] = ApiClient.convertToType(data['df_resid'], 'Number');
            }
            if (data.hasOwnProperty('het_scale')) {
                obj['het_scale'] = ApiClient.convertToType(data['het_scale'], 'Number');
            }
            if (data.hasOwnProperty('history')) {
                obj['history'] = ApiClient.convertToType(data['history'], ['Number']);
            }
            if (data.hasOwnProperty('prediction')) {
                obj['prediction'] = ApiClient.convertToType(data['prediction'], Object);
            }
            if (data.hasOwnProperty('HC0_se')) {
                obj['HC0_se'] = ApiClient.convertToType(data['HC0_se'], {'String': Object});
            }
            if (data.hasOwnProperty('HC1_se')) {
                obj['HC1_se'] = ApiClient.convertToType(data['HC1_se'], {'String': Object});
            }
            if (data.hasOwnProperty('HC2_se')) {
                obj['HC2_se'] = ApiClient.convertToType(data['HC2_se'], {'String': Object});
            }
            if (data.hasOwnProperty('HC3_se')) {
                obj['HC3_se'] = ApiClient.convertToType(data['HC3_se'], {'String': Object});
            }
            if (data.hasOwnProperty('aic')) {
                obj['aic'] = ApiClient.convertToType(data['aic'], 'Number');
            }
            if (data.hasOwnProperty('bic')) {
                obj['bic'] = ApiClient.convertToType(data['bic'], 'Number');
            }
            if (data.hasOwnProperty('bse')) {
                obj['bse'] = ApiClient.convertToType(data['bse'], {'String': Object});
            }
            if (data.hasOwnProperty('centered_tss')) {
                obj['centered_tss'] = ApiClient.convertToType(data['centered_tss'], 'Number');
            }
            if (data.hasOwnProperty('condition_number')) {
                obj['condition_number'] = ApiClient.convertToType(data['condition_number'], 'Number');
            }
            if (data.hasOwnProperty('conf_int')) {
                obj['conf_int'] = ApiClient.convertToType(data['conf_int'], {'String': ['Number']});
            }
            if (data.hasOwnProperty('cov_HC0')) {
                obj['cov_HC0'] = ApiClient.convertToType(data['cov_HC0'], [['Number']]);
            }
            if (data.hasOwnProperty('cov_HC1')) {
                obj['cov_HC1'] = ApiClient.convertToType(data['cov_HC1'], [['Number']]);
            }
            if (data.hasOwnProperty('cov_HC2')) {
                obj['cov_HC2'] = ApiClient.convertToType(data['cov_HC2'], [['Number']]);
            }
            if (data.hasOwnProperty('cov_HC3')) {
                obj['cov_HC3'] = ApiClient.convertToType(data['cov_HC3'], [['Number']]);
            }
            if (data.hasOwnProperty('cov_kwds')) {
                obj['cov_kwds'] = ApiClient.convertToType(data['cov_kwds'], {'String': Object});
            }
            if (data.hasOwnProperty('cov_params')) {
                obj['cov_params'] = ApiClient.convertToType(data['cov_params'], ['Number']);
            }
            if (data.hasOwnProperty('cov_type')) {
                obj['cov_type'] = ApiClient.convertToType(data['cov_type'], 'String');
            }
            if (data.hasOwnProperty('df_model')) {
                obj['df_model'] = ApiClient.convertToType(data['df_model'], 'Number');
            }
            if (data.hasOwnProperty('diagn')) {
                obj['diagn'] = ApiClient.convertToType(data['diagn'], {'String': Object});
            }
            if (data.hasOwnProperty('eigenvals')) {
                obj['eigenvals'] = ApiClient.convertToType(data['eigenvals'], ['Number']);
            }
            if (data.hasOwnProperty('ess')) {
                obj['ess'] = ApiClient.convertToType(data['ess'], 'Number');
            }
            if (data.hasOwnProperty('f_pvalue')) {
                obj['f_pvalue'] = ApiClient.convertToType(data['f_pvalue'], 'Number');
            }
            if (data.hasOwnProperty('fittedvalues')) {
                obj['fittedvalues'] = WSeries.constructFromObject(data['fittedvalues']);
            }
            if (data.hasOwnProperty('fvalue')) {
                obj['fvalue'] = ApiClient.convertToType(data['fvalue'], 'Number');
            }
            if (data.hasOwnProperty('k_constant')) {
                obj['k_constant'] = ApiClient.convertToType(data['k_constant'], 'Number');
            }
            if (data.hasOwnProperty('llf')) {
                obj['llf'] = ApiClient.convertToType(data['llf'], 'Number');
            }
            if (data.hasOwnProperty('mse_model')) {
                obj['mse_model'] = ApiClient.convertToType(data['mse_model'], 'Number');
            }
            if (data.hasOwnProperty('mse_resid')) {
                obj['mse_resid'] = ApiClient.convertToType(data['mse_resid'], 'Number');
            }
            if (data.hasOwnProperty('mse_total')) {
                obj['mse_total'] = ApiClient.convertToType(data['mse_total'], 'Number');
            }
            if (data.hasOwnProperty('nobs')) {
                obj['nobs'] = ApiClient.convertToType(data['nobs'], 'Number');
            }
            if (data.hasOwnProperty('normalized_cov_params')) {
                obj['normalized_cov_params'] = ApiClient.convertToType(data['normalized_cov_params'], {'String': ['Number']});
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('predict')) {
                obj['predict'] = ApiClient.convertToType(data['predict'], {'String': Object});
            }
            if (data.hasOwnProperty('pvalues')) {
                obj['pvalues'] = ApiClient.convertToType(data['pvalues'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('resid')) {
                obj['resid'] = WSeries.constructFromObject(data['resid']);
            }
            if (data.hasOwnProperty('resid_pearson')) {
                obj['resid_pearson'] = ApiClient.convertToType(data['resid_pearson'], ['Number']);
            }
            if (data.hasOwnProperty('rsquared')) {
                obj['rsquared'] = ApiClient.convertToType(data['rsquared'], 'Number');
            }
            if (data.hasOwnProperty('rsquared_adj')) {
                obj['rsquared_adj'] = ApiClient.convertToType(data['rsquared_adj'], 'Number');
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = ApiClient.convertToType(data['scale'], 'Number');
            }
            if (data.hasOwnProperty('ssr')) {
                obj['ssr'] = ApiClient.convertToType(data['ssr'], 'Number');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('summary2')) {
                obj['summary2'] = ApiClient.convertToType(data['summary2'], 'String');
            }
            if (data.hasOwnProperty('tvalues')) {
                obj['tvalues'] = ApiClient.convertToType(data['tvalues'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('uncentered_tss')) {
                obj['uncentered_tss'] = ApiClient.convertToType(data['uncentered_tss'], 'Number');
            }
            if (data.hasOwnProperty('use_t')) {
                obj['use_t'] = ApiClient.convertToType(data['use_t'], 'Boolean');
            }
            if (data.hasOwnProperty('wresid')) {
                obj['wresid'] = WSeries.constructFromObject(data['wresid']);
            }
            if (data.hasOwnProperty('jb')) {
                obj['jb'] = ApiClient.convertToType(data['jb'], 'Number');
            }
            if (data.hasOwnProperty('jbpv')) {
                obj['jbpv'] = ApiClient.convertToType(data['jbpv'], 'Number');
            }
            if (data.hasOwnProperty('skew')) {
                obj['skew'] = ApiClient.convertToType(data['skew'], 'Number');
            }
            if (data.hasOwnProperty('kurtosis')) {
                obj['kurtosis'] = ApiClient.convertToType(data['kurtosis'], 'Number');
            }
            if (data.hasOwnProperty('omni')) {
                obj['omni'] = ApiClient.convertToType(data['omni'], 'Number');
            }
            if (data.hasOwnProperty('omnipv')) {
                obj['omnipv'] = ApiClient.convertToType(data['omnipv'], 'Number');
            }
            if (data.hasOwnProperty('dw')) {
                obj['dw'] = ApiClient.convertToType(data['dw'], 'Number');
            }
            if (data.hasOwnProperty('datetime')) {
                obj['datetime'] = ApiClient.convertToType(data['datetime'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * analytics id
 * @member {String} ayid
 */
LMResult.prototype['ayid'] = undefined;

/**
 * model id
 * @member {String} mid
 */
LMResult.prototype['mid'] = undefined;

/**
 * regression coefficients
 * @member {Object.<String, Object>} coeff
 */
LMResult.prototype['coeff'] = undefined;

/**
 * Model degrees of freedom. The number of regressors p. Does not include the constant if one is present.
 * @member {Number} df
 */
LMResult.prototype['df'] = undefined;

/**
 * Residual degrees of freedom. n - p - 1, if a constant is present. n - p if a constant is not included.
 * @member {Number} df_resid
 */
LMResult.prototype['df_resid'] = undefined;

/**
 * adjusted squared residuals for heteroscedasticity robust standard errors. Is only available after HC#_se or cov_HC# is called. See HC#_se for more information.
 * @member {Number} het_scale
 */
LMResult.prototype['het_scale'] = undefined;

/**
 * Estimation history for iterative estimators.
 * @member {Array.<Number>} history
 */
LMResult.prototype['history'] = undefined;

/**
 * Prediction
 * @member {Object} prediction
 */
LMResult.prototype['prediction'] = undefined;

/**
 * @member {Object.<String, Object>} HC0_se
 */
LMResult.prototype['HC0_se'] = undefined;

/**
 * @member {Object.<String, Object>} HC1_se
 */
LMResult.prototype['HC1_se'] = undefined;

/**
 * @member {Object.<String, Object>} HC2_se
 */
LMResult.prototype['HC2_se'] = undefined;

/**
 * @member {Object.<String, Object>} HC3_se
 */
LMResult.prototype['HC3_se'] = undefined;

/**
 * @member {Number} aic
 */
LMResult.prototype['aic'] = undefined;

/**
 * @member {Number} bic
 */
LMResult.prototype['bic'] = undefined;

/**
 * @member {Object.<String, Object>} bse
 */
LMResult.prototype['bse'] = undefined;

/**
 * @member {Number} centered_tss
 */
LMResult.prototype['centered_tss'] = undefined;

/**
 * @member {Number} condition_number
 */
LMResult.prototype['condition_number'] = undefined;

/**
 * @member {Object.<String, Array.<Number>>} conf_int
 */
LMResult.prototype['conf_int'] = undefined;

/**
 * @member {Array.<Array.<Number>>} cov_HC0
 */
LMResult.prototype['cov_HC0'] = undefined;

/**
 * @member {Array.<Array.<Number>>} cov_HC1
 */
LMResult.prototype['cov_HC1'] = undefined;

/**
 * @member {Array.<Array.<Number>>} cov_HC2
 */
LMResult.prototype['cov_HC2'] = undefined;

/**
 * @member {Array.<Array.<Number>>} cov_HC3
 */
LMResult.prototype['cov_HC3'] = undefined;

/**
 * @member {Object.<String, Object>} cov_kwds
 */
LMResult.prototype['cov_kwds'] = undefined;

/**
 * @member {Array.<Number>} cov_params
 */
LMResult.prototype['cov_params'] = undefined;

/**
 * @member {String} cov_type
 */
LMResult.prototype['cov_type'] = undefined;

/**
 * @member {Number} df_model
 */
LMResult.prototype['df_model'] = undefined;

/**
 * @member {Object.<String, Object>} diagn
 */
LMResult.prototype['diagn'] = undefined;

/**
 * @member {Array.<Number>} eigenvals
 */
LMResult.prototype['eigenvals'] = undefined;

/**
 * @member {Number} ess
 */
LMResult.prototype['ess'] = undefined;

/**
 * @member {Number} f_pvalue
 */
LMResult.prototype['f_pvalue'] = undefined;

/**
 * @member {module:model/WSeries} fittedvalues
 */
LMResult.prototype['fittedvalues'] = undefined;

/**
 * @member {Number} fvalue
 */
LMResult.prototype['fvalue'] = undefined;

/**
 * @member {Number} k_constant
 */
LMResult.prototype['k_constant'] = undefined;

/**
 * @member {Number} llf
 */
LMResult.prototype['llf'] = undefined;

/**
 * @member {Number} mse_model
 */
LMResult.prototype['mse_model'] = undefined;

/**
 * @member {Number} mse_resid
 */
LMResult.prototype['mse_resid'] = undefined;

/**
 * @member {Number} mse_total
 */
LMResult.prototype['mse_total'] = undefined;

/**
 * @member {Number} nobs
 */
LMResult.prototype['nobs'] = undefined;

/**
 * @member {Object.<String, Array.<Number>>} normalized_cov_params
 */
LMResult.prototype['normalized_cov_params'] = undefined;

/**
 * @member {Object.<String, Number>} params
 */
LMResult.prototype['params'] = undefined;

/**
 * @member {Object.<String, Object>} predict
 */
LMResult.prototype['predict'] = undefined;

/**
 * @member {Object.<String, Number>} pvalues
 */
LMResult.prototype['pvalues'] = undefined;

/**
 * @member {module:model/WSeries} resid
 */
LMResult.prototype['resid'] = undefined;

/**
 * @member {Array.<Number>} resid_pearson
 */
LMResult.prototype['resid_pearson'] = undefined;

/**
 * @member {Number} rsquared
 */
LMResult.prototype['rsquared'] = undefined;

/**
 * @member {Number} rsquared_adj
 */
LMResult.prototype['rsquared_adj'] = undefined;

/**
 * @member {Number} scale
 */
LMResult.prototype['scale'] = undefined;

/**
 * @member {Number} ssr
 */
LMResult.prototype['ssr'] = undefined;

/**
 * @member {String} summary
 */
LMResult.prototype['summary'] = undefined;

/**
 * @member {String} summary2
 */
LMResult.prototype['summary2'] = undefined;

/**
 * @member {Object.<String, Number>} tvalues
 */
LMResult.prototype['tvalues'] = undefined;

/**
 * @member {Number} uncentered_tss
 */
LMResult.prototype['uncentered_tss'] = undefined;

/**
 * @member {Boolean} use_t
 */
LMResult.prototype['use_t'] = undefined;

/**
 * @member {module:model/WSeries} wresid
 */
LMResult.prototype['wresid'] = undefined;

/**
 * @member {Number} jb
 */
LMResult.prototype['jb'] = undefined;

/**
 * @member {Number} jbpv
 */
LMResult.prototype['jbpv'] = undefined;

/**
 * @member {Number} skew
 */
LMResult.prototype['skew'] = undefined;

/**
 * @member {Number} kurtosis
 */
LMResult.prototype['kurtosis'] = undefined;

/**
 * @member {Number} omni
 */
LMResult.prototype['omni'] = undefined;

/**
 * @member {Number} omnipv
 */
LMResult.prototype['omnipv'] = undefined;

/**
 * Durbin-Watson
 * @member {Number} dw
 */
LMResult.prototype['dw'] = undefined;

/**
 * @member {Date} datetime
 */
LMResult.prototype['datetime'] = undefined;






export default LMResult;

