/**
 * ChronosDB swagger
 * ChronosDB Analytics server
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LMBGParameters from '../model/LMBGParameters';
import LMBGResponse from '../model/LMBGResponse';
import LMParameters from '../model/LMParameters';
import LMResponse from '../model/LMResponse';
import VARParameters from '../model/VARParameters';
import VARResult from '../model/VARResult';

/**
* Model service.
* @module api/ModelApi
* @version 0.1
*/
export default class ModelApi {

    /**
    * Constructs a new ModelApi. 
    * @alias module:api/ModelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the analyticsApiLmBg operation.
     * @callback module:api/ModelApi~analyticsApiLmBgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LMBGResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Breusch-Godfrey test
     * Breusch-Godfrey test
     * @param {module:model/LMBGParameters} lMBGParameters Time series parameters. dtype and freq are required
     * @param {module:api/ModelApi~analyticsApiLmBgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LMBGResponse}
     */
    analyticsApiLmBg(lMBGParameters, callback) {
      let postBody = lMBGParameters;
      // verify the required parameter 'lMBGParameters' is set
      if (lMBGParameters === undefined || lMBGParameters === null) {
        throw new Error("Missing the required parameter 'lMBGParameters' when calling analyticsApiLmBg");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LMBGResponse;
      return this.apiClient.callApi(
        '/model/lm/diagnostics/bg', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsApiLmPost operation.
     * @callback module:api/ModelApi~analyticsApiLmPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LMResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * linear model
     * Linear Model
     * @param {module:model/LMParameters} lMParameters Time series parameters. dtype and freq are required
     * @param {module:api/ModelApi~analyticsApiLmPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LMResponse}
     */
    analyticsApiLmPost(lMParameters, callback) {
      let postBody = lMParameters;
      // verify the required parameter 'lMParameters' is set
      if (lMParameters === undefined || lMParameters === null) {
        throw new Error("Missing the required parameter 'lMParameters' when calling analyticsApiLmPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LMResponse;
      return this.apiClient.callApi(
        '/model/lm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsApiLmReset operation.
     * @callback module:api/ModelApi~analyticsApiLmResetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LMResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ramsey's RESET test
     * @param {module:model/LMParameters} lMParameters Time series parameters. dtype and freq are required
     * @param {module:api/ModelApi~analyticsApiLmResetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LMResponse}
     */
    analyticsApiLmReset(lMParameters, callback) {
      let postBody = lMParameters;
      // verify the required parameter 'lMParameters' is set
      if (lMParameters === undefined || lMParameters === null) {
        throw new Error("Missing the required parameter 'lMParameters' when calling analyticsApiLmReset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LMResponse;
      return this.apiClient.callApi(
        '/model/lm/diagnostics/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsApiLmSw operation.
     * @callback module:api/ModelApi~analyticsApiLmSwCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LMResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shapiro-Wilkâ€™s normality test
     * @param {module:model/LMParameters} lMParameters Time series parameters. dtype and freq are required
     * @param {module:api/ModelApi~analyticsApiLmSwCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LMResponse}
     */
    analyticsApiLmSw(lMParameters, callback) {
      let postBody = lMParameters;
      // verify the required parameter 'lMParameters' is set
      if (lMParameters === undefined || lMParameters === null) {
        throw new Error("Missing the required parameter 'lMParameters' when calling analyticsApiLmSw");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LMResponse;
      return this.apiClient.callApi(
        '/model/lm/diagnostics/sw', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsApiLmUnitroot operation.
     * @callback module:api/ModelApi~analyticsApiLmUnitrootCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LMResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unit root of residual
     * Unit root of residual
     * @param {module:model/LMParameters} lMParameters Time series parameters. dtype and freq are required
     * @param {module:api/ModelApi~analyticsApiLmUnitrootCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LMResponse}
     */
    analyticsApiLmUnitroot(lMParameters, callback) {
      let postBody = lMParameters;
      // verify the required parameter 'lMParameters' is set
      if (lMParameters === undefined || lMParameters === null) {
        throw new Error("Missing the required parameter 'lMParameters' when calling analyticsApiLmUnitroot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LMResponse;
      return this.apiClient.callApi(
        '/model/lm/diagnostics/unitroot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsApiVarPost operation.
     * @callback module:api/ModelApi~analyticsApiVarPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VARResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * linear model
     * Linear Model
     * @param {module:model/VARParameters} vARParameters model parameters
     * @param {module:api/ModelApi~analyticsApiVarPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VARResult}
     */
    analyticsApiVarPost(vARParameters, callback) {
      let postBody = vARParameters;
      // verify the required parameter 'vARParameters' is set
      if (vARParameters === undefined || vARParameters === null) {
        throw new Error("Missing the required parameter 'vARParameters' when calling analyticsApiVarPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VARResult;
      return this.apiClient.callApi(
        '/model/var', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
