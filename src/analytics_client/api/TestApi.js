/**
 * ChronosDB swagger
 * ChronosDB Analytics server
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ADFParameters from '../model/ADFParameters';
import ADFResponse from '../model/ADFResponse';
import AutocorrelationParameters from '../model/AutocorrelationParameters';
import AutocorrelationResponse from '../model/AutocorrelationResponse';
import CointParameters from '../model/CointParameters';
import CointResponse from '../model/CointResponse';
import DescriptiveParameters from '../model/DescriptiveParameters';
import DescriptiveResponse from '../model/DescriptiveResponse';
import KPSSParameters from '../model/KPSSParameters';
import KPSSResponse from '../model/KPSSResponse';
import LBParameters from '../model/LBParameters';
import LBResponse from '../model/LBResponse';
import LMParameters from '../model/LMParameters';
import LMResponse from '../model/LMResponse';
import PPParameters from '../model/PPParameters';
import PPResponse from '../model/PPResponse';

/**
* Test service.
* @module api/TestApi
* @version 0.1
*/
export default class TestApi {

    /**
    * Constructs a new TestApi. 
    * @alias module:api/TestApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the analyticsApiLmBp operation.
     * @callback module:api/TestApi~analyticsApiLmBpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LMResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Breusch-Pagan heteroskedasticity test
     * @param {module:model/LMParameters} lMParameters Time series parameters. dtype and freq are required
     * @param {module:api/TestApi~analyticsApiLmBpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LMResponse}
     */
    analyticsApiLmBp(lMParameters, callback) {
      let postBody = lMParameters;
      // verify the required parameter 'lMParameters' is set
      if (lMParameters === undefined || lMParameters === null) {
        throw new Error("Missing the required parameter 'lMParameters' when calling analyticsApiLmBp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LMResponse;
      return this.apiClient.callApi(
        '/model/lm/diagnostics/bp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsApiTestsAdf operation.
     * @callback module:api/TestApi~analyticsApiTestsAdfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ADFResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Augmented Dickey-Fuller unit root test.
     * Augmented Dickey-Fuller unit root test.
     * @param {module:model/ADFParameters} aDFParameters model parameters
     * @param {module:api/TestApi~analyticsApiTestsAdfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ADFResponse}
     */
    analyticsApiTestsAdf(aDFParameters, callback) {
      let postBody = aDFParameters;
      // verify the required parameter 'aDFParameters' is set
      if (aDFParameters === undefined || aDFParameters === null) {
        throw new Error("Missing the required parameter 'aDFParameters' when calling analyticsApiTestsAdf");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ADFResponse;
      return this.apiClient.callApi(
        '/test/adf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsApiTestsAutocorrelation operation.
     * @callback module:api/TestApi~analyticsApiTestsAutocorrelationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutocorrelationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Autocorrelation analysis.
     * Autocorrelation analysis.
     * @param {module:model/AutocorrelationParameters} autocorrelationParameters model parameters
     * @param {module:api/TestApi~analyticsApiTestsAutocorrelationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutocorrelationResponse}
     */
    analyticsApiTestsAutocorrelation(autocorrelationParameters, callback) {
      let postBody = autocorrelationParameters;
      // verify the required parameter 'autocorrelationParameters' is set
      if (autocorrelationParameters === undefined || autocorrelationParameters === null) {
        throw new Error("Missing the required parameter 'autocorrelationParameters' when calling analyticsApiTestsAutocorrelation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AutocorrelationResponse;
      return this.apiClient.callApi(
        '/test/autocorrelation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsApiTestsCoint operation.
     * @callback module:api/TestApi~analyticsApiTestsCointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test for no-cointegration of a univariate equation.
     * Test for no-cointegration of a univariate equation.
     * @param {module:model/CointParameters} cointParameters Variables and parameters
     * @param {module:api/TestApi~analyticsApiTestsCointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CointResponse}
     */
    analyticsApiTestsCoint(cointParameters, callback) {
      let postBody = cointParameters;
      // verify the required parameter 'cointParameters' is set
      if (cointParameters === undefined || cointParameters === null) {
        throw new Error("Missing the required parameter 'cointParameters' when calling analyticsApiTestsCoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CointResponse;
      return this.apiClient.callApi(
        '/test/coint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsApiTestsDescriptive operation.
     * @callback module:api/TestApi~analyticsApiTestsDescriptiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescriptiveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Descriptive Statistics
     * Descriptive Statistics
     * @param {module:model/DescriptiveParameters} descriptiveParameters model parameters
     * @param {module:api/TestApi~analyticsApiTestsDescriptiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescriptiveResponse}
     */
    analyticsApiTestsDescriptive(descriptiveParameters, callback) {
      let postBody = descriptiveParameters;
      // verify the required parameter 'descriptiveParameters' is set
      if (descriptiveParameters === undefined || descriptiveParameters === null) {
        throw new Error("Missing the required parameter 'descriptiveParameters' when calling analyticsApiTestsDescriptive");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescriptiveResponse;
      return this.apiClient.callApi(
        '/test/descriptive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsApiTestsKpss operation.
     * @callback module:api/TestApi~analyticsApiTestsKpssCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KPSSResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Kwiatkowski-Phillips-Schmidt-Shin test for stationarity.
     * Kwiatkowski-Phillips-Schmidt-Shin test for stationarity.
     * @param {module:model/KPSSParameters} kPSSParameters model parameters
     * @param {module:api/TestApi~analyticsApiTestsKpssCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KPSSResponse}
     */
    analyticsApiTestsKpss(kPSSParameters, callback) {
      let postBody = kPSSParameters;
      // verify the required parameter 'kPSSParameters' is set
      if (kPSSParameters === undefined || kPSSParameters === null) {
        throw new Error("Missing the required parameter 'kPSSParameters' when calling analyticsApiTestsKpss");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KPSSResponse;
      return this.apiClient.callApi(
        '/test/kpss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsApiTestsLb operation.
     * @callback module:api/TestApi~analyticsApiTestsLbCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LBResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ljung-Box serial correlation test
     * Ljung-Box serial correlation test
     * @param {module:model/LBParameters} lBParameters Time series parameters. dtype and freq are required
     * @param {module:api/TestApi~analyticsApiTestsLbCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LBResponse}
     */
    analyticsApiTestsLb(lBParameters, callback) {
      let postBody = lBParameters;
      // verify the required parameter 'lBParameters' is set
      if (lBParameters === undefined || lBParameters === null) {
        throw new Error("Missing the required parameter 'lBParameters' when calling analyticsApiTestsLb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LBResponse;
      return this.apiClient.callApi(
        '/test/lb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsApiTestsPp operation.
     * @callback module:api/TestApi~analyticsApiTestsPpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PPResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Phillips Perron unit root test.
     * Phillips Perron unit root test.
     * @param {module:model/PPParameters} pPParameters PP Parameters
     * @param {module:api/TestApi~analyticsApiTestsPpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PPResponse}
     */
    analyticsApiTestsPp(pPParameters, callback) {
      let postBody = pPParameters;
      // verify the required parameter 'pPParameters' is set
      if (pPParameters === undefined || pPParameters === null) {
        throw new Error("Missing the required parameter 'pPParameters' when calling analyticsApiTestsPp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PPResponse;
      return this.apiClient.callApi(
        '/test/pp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
