/**
 * ChronosDB swagger
 * ChronosDB Analytics server
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BKFilterParameters from '../model/BKFilterParameters';
import BKFilterResponse from '../model/BKFilterResponse';
import CFFilterParameters from '../model/CFFilterParameters';
import CFFilterResponse from '../model/CFFilterResponse';
import HPFilterParameters from '../model/HPFilterParameters';
import HPFilterResponse from '../model/HPFilterResponse';

/**
* Filter service.
* @module api/FilterApi
* @version 0.1
*/
export default class FilterApi {

    /**
    * Constructs a new FilterApi. 
    * @alias module:api/FilterApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the analyticsApiFiltersBkfilter operation.
     * @callback module:api/FilterApi~analyticsApiFiltersBkfilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BKFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BK filter
     * BK Filter
     * @param {module:model/BKFilterParameters} bKFilterParameters BK Filter
     * @param {module:api/FilterApi~analyticsApiFiltersBkfilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BKFilterResponse}
     */
    analyticsApiFiltersBkfilter(bKFilterParameters, callback) {
      let postBody = bKFilterParameters;
      // verify the required parameter 'bKFilterParameters' is set
      if (bKFilterParameters === undefined || bKFilterParameters === null) {
        throw new Error("Missing the required parameter 'bKFilterParameters' when calling analyticsApiFiltersBkfilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BKFilterResponse;
      return this.apiClient.callApi(
        '/filter/bkfilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsApiFiltersCffilter operation.
     * @callback module:api/FilterApi~analyticsApiFiltersCffilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CFFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CF filter
     * CF Filter
     * @param {module:model/CFFilterParameters} cFFilterParameters CF Filter
     * @param {module:api/FilterApi~analyticsApiFiltersCffilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CFFilterResponse}
     */
    analyticsApiFiltersCffilter(cFFilterParameters, callback) {
      let postBody = cFFilterParameters;
      // verify the required parameter 'cFFilterParameters' is set
      if (cFFilterParameters === undefined || cFFilterParameters === null) {
        throw new Error("Missing the required parameter 'cFFilterParameters' when calling analyticsApiFiltersCffilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CFFilterResponse;
      return this.apiClient.callApi(
        '/filter/cffilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsApiFiltersHpfilter operation.
     * @callback module:api/FilterApi~analyticsApiFiltersHpfilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HPFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HP filter
     * HP Filter
     * @param {module:model/HPFilterParameters} hPFilterParameters HP Filter
     * @param {module:api/FilterApi~analyticsApiFiltersHpfilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HPFilterResponse}
     */
    analyticsApiFiltersHpfilter(hPFilterParameters, callback) {
      let postBody = hPFilterParameters;
      // verify the required parameter 'hPFilterParameters' is set
      if (hPFilterParameters === undefined || hPFilterParameters === null) {
        throw new Error("Missing the required parameter 'hPFilterParameters' when calling analyticsApiFiltersHpfilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HPFilterResponse;
      return this.apiClient.callApi(
        '/filter/hpfilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
