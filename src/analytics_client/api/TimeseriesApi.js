/**
 * ChronosDB swagger
 * ChronosDB Analytics server
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ADFParameters from '../model/ADFParameters';
import ADFResults from '../model/ADFResults';

/**
* Timeseries service.
* @module api/TimeseriesApi
* @version 0.1
*/
export default class TimeseriesApi {

    /**
    * Constructs a new TimeseriesApi. 
    * @alias module:api/TimeseriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the analyticsApiTsaAdf operation.
     * @callback module:api/TimeseriesApi~analyticsApiTsaAdfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ADFResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Augmented Dickey-Fuller unit root test.
     * Augmented Dickey-Fuller unit root test.
     * @param {module:model/ADFParameters} aDFParameters model parameters
     * @param {module:api/TimeseriesApi~analyticsApiTsaAdfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ADFResults}
     */
    analyticsApiTsaAdf(aDFParameters, callback) {
      let postBody = aDFParameters;
      // verify the required parameter 'aDFParameters' is set
      if (aDFParameters === undefined || aDFParameters === null) {
        throw new Error("Missing the required parameter 'aDFParameters' when calling analyticsApiTsaAdf");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ADFResults;
      return this.apiClient.callApi(
        '/tsa/adf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsApiTsaKpss operation.
     * @callback module:api/TimeseriesApi~analyticsApiTsaKpssCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ADFResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Kwiatkowski-Phillips-Schmidt-Shin test for stationarity.
     * Kwiatkowski-Phillips-Schmidt-Shin test for stationarity.
     * @param {module:model/ADFParameters} aDFParameters model parameters
     * @param {module:api/TimeseriesApi~analyticsApiTsaKpssCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ADFResults}
     */
    analyticsApiTsaKpss(aDFParameters, callback) {
      let postBody = aDFParameters;
      // verify the required parameter 'aDFParameters' is set
      if (aDFParameters === undefined || aDFParameters === null) {
        throw new Error("Missing the required parameter 'aDFParameters' when calling analyticsApiTsaKpss");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ADFResults;
      return this.apiClient.callApi(
        '/tsa/kpss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
