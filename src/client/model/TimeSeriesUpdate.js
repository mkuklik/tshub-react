/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TimeSeriesUpdate model module.
 * @module model/TimeSeriesUpdate
 * @version 0.1
 */
class TimeSeriesUpdate {
    /**
     * Constructs a new <code>TimeSeriesUpdate</code>.
     * Time Series properties, which can be updated. All others are mutable. Used in time series update
     * @alias module:model/TimeSeriesUpdate
     */
    constructor() { 
        
        TimeSeriesUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimeSeriesUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeSeriesUpdate} obj Optional instance to populate.
     * @return {module:model/TimeSeriesUpdate} The populated <code>TimeSeriesUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeSeriesUpdate();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], Object);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('discontinued')) {
                obj['discontinued'] = ApiClient.convertToType(data['discontinued'], 'Boolean');
            }
            if (data.hasOwnProperty('legend')) {
                obj['legend'] = ApiClient.convertToType(data['legend'], Object);
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], Object);
            }
        }
        return obj;
    }


}

/**
 * unique series name in a collection
 * @member {String} name
 */
TimeSeriesUpdate.prototype['name'] = undefined;

/**
 * units of values
 * @member {Object} unit
 */
TimeSeriesUpdate.prototype['unit'] = undefined;

/**
 * Title of time series
 * @member {String} title
 */
TimeSeriesUpdate.prototype['title'] = undefined;

/**
 * Detail description of time series
 * @member {String} description
 */
TimeSeriesUpdate.prototype['description'] = undefined;

/**
 * Time series, which are no longer recorded can be marked as discontinued. Discontinued series can be kept in the database for historical reasons
 * @member {Boolean} discontinued
 */
TimeSeriesUpdate.prototype['discontinued'] = undefined;

/**
 * Legend for observation status; it maps integer to a status string, e.g. 1 -> preliminary, 2-> projected, etc.
 * @member {Object} legend
 */
TimeSeriesUpdate.prototype['legend'] = undefined;

/**
 * Time series attributes are key-value pairs used to store meta information about the series, e.g. location, region, category, etc. Note that units and discontinued properties are explicitly 
 * @member {Object} attributes
 */
TimeSeriesUpdate.prototype['attributes'] = undefined;






export default TimeSeriesUpdate;

