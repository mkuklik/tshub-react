/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DType from './DType';
import Frequency from './Frequency';
import IType from './IType';
import TSI from './TSI';
import TimeSeriesAllOf from './TimeSeriesAllOf';
import TimeSeriesCore from './TimeSeriesCore';
import TimeSeriesUpdate from './TimeSeriesUpdate';

/**
 * The TimeSeries model module.
 * @module model/TimeSeries
 * @version 0.1
 */
class TimeSeries {
    /**
     * Constructs a new <code>TimeSeries</code>.
     * Full definition of time series, used to create a  new time series
     * @alias module:model/TimeSeries
     * @implements module:model/TimeSeriesCore
     * @implements module:model/TSI
     * @implements module:model/TimeSeriesUpdate
     * @implements module:model/TimeSeriesAllOf
     */
    constructor() { 
        TimeSeriesCore.initialize(this);TSI.initialize(this);TimeSeriesUpdate.initialize(this);TimeSeriesAllOf.initialize(this);
        TimeSeries.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimeSeries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeSeries} obj Optional instance to populate.
     * @return {module:model/TimeSeries} The populated <code>TimeSeries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeSeries();
            TimeSeriesCore.constructFromObject(data, obj);
            TSI.constructFromObject(data, obj);
            TimeSeriesUpdate.constructFromObject(data, obj);
            TimeSeriesAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('tsid')) {
                obj['tsid'] = ApiClient.convertToType(data['tsid'], 'String');
            }
            if (data.hasOwnProperty('collId')) {
                obj['collId'] = ApiClient.convertToType(data['collId'], 'String');
            }
            if (data.hasOwnProperty('dtype')) {
                obj['dtype'] = DType.constructFromObject(data['dtype']);
            }
            if (data.hasOwnProperty('dparams')) {
                obj['dparams'] = ApiClient.convertToType(data['dparams'], Object);
            }
            if (data.hasOwnProperty('itype')) {
                obj['itype'] = IType.constructFromObject(data['itype']);
            }
            if (data.hasOwnProperty('freq')) {
                obj['freq'] = Frequency.constructFromObject(data['freq']);
            }
            if (data.hasOwnProperty('fparams')) {
                obj['fparams'] = ApiClient.convertToType(data['fparams'], Object);
            }
            if (data.hasOwnProperty('entity')) {
                obj['entity'] = ApiClient.convertToType(data['entity'], 'Number');
            }
            if (data.hasOwnProperty('variable')) {
                obj['variable'] = ApiClient.convertToType(data['variable'], 'String');
            }
            if (data.hasOwnProperty('tsi')) {
                obj['tsi'] = ApiClient.convertToType(data['tsi'], 'String');
            }
            if (data.hasOwnProperty('space')) {
                obj['space'] = ApiClient.convertToType(data['space'], 'String');
            }
            if (data.hasOwnProperty('collection')) {
                obj['collection'] = ApiClient.convertToType(data['collection'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], Object);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('discontinued')) {
                obj['discontinued'] = ApiClient.convertToType(data['discontinued'], 'Boolean');
            }
            if (data.hasOwnProperty('legend')) {
                obj['legend'] = ApiClient.convertToType(data['legend'], Object);
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], Object);
            }
            if (data.hasOwnProperty('realStart')) {
                obj['realStart'] = ApiClient.convertToType(data['realStart'], 'Date');
            }
            if (data.hasOwnProperty('realEnd')) {
                obj['realEnd'] = ApiClient.convertToType(data['realEnd'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * @member {String} tsid
 */
TimeSeries.prototype['tsid'] = undefined;

/**
 * @member {String} collId
 */
TimeSeries.prototype['collId'] = undefined;

/**
 * @member {module:model/DType} dtype
 */
TimeSeries.prototype['dtype'] = undefined;

/**
 * parameters of data type, e.g. enum
 * @member {Object} dparams
 */
TimeSeries.prototype['dparams'] = undefined;

/**
 * @member {module:model/IType} itype
 */
TimeSeries.prototype['itype'] = undefined;

/**
 * @member {module:model/Frequency} freq
 */
TimeSeries.prototype['freq'] = undefined;

/**
 * parameters of time index type, e.g. time zone if applicable, pivot date, etc
 * @member {Object} fparams
 */
TimeSeries.prototype['fparams'] = undefined;

/**
 * Entity is used in panel data to associate time series with a unit or individual, e.g. household or company, etc. It is used together with variable name to create a unique reference to time series in a panel collection, (entity, variable). Entity is immutable
 * @member {Number} entity
 */
TimeSeries.prototype['entity'] = undefined;

/**
 * variable is used in panel data to associate time series with a cross-sectional measure, e.g. eye color, etc. It is used together with variable name to create a unique reference to time series in a panel collection, (entity, variable). Variable is immutable
 * @member {String} variable
 */
TimeSeries.prototype['variable'] = undefined;

/**
 * Time Series Identifier as a string where ts name, collection name and space name as separated by comma
 * @member {String} tsi
 */
TimeSeries.prototype['tsi'] = undefined;

/**
 * @member {String} space
 */
TimeSeries.prototype['space'] = undefined;

/**
 * @member {String} collection
 */
TimeSeries.prototype['collection'] = undefined;

/**
 * unique series name in a collection
 * @member {String} name
 */
TimeSeries.prototype['name'] = undefined;

/**
 * units of values
 * @member {Object} unit
 */
TimeSeries.prototype['unit'] = undefined;

/**
 * Title of time series
 * @member {String} title
 */
TimeSeries.prototype['title'] = undefined;

/**
 * Detail description of time series
 * @member {String} description
 */
TimeSeries.prototype['description'] = undefined;

/**
 * Time series, which are no longer recorded can be marked as discontinued. Discontinued series can be kept in the database for historical reasons
 * @member {Boolean} discontinued
 */
TimeSeries.prototype['discontinued'] = undefined;

/**
 * Legend for observation status; it maps integer to a status string, e.g. 1 -> preliminary, 2-> projected, etc.
 * @member {Object} legend
 */
TimeSeries.prototype['legend'] = undefined;

/**
 * Time series attributes are key-value pairs used to store meta information about the series, e.g. location, region, category, etc. Note that units and discontinued properties are explicitly 
 * @member {Object} attributes
 */
TimeSeries.prototype['attributes'] = undefined;

/**
 * @member {Date} realStart
 */
TimeSeries.prototype['realStart'] = undefined;

/**
 * @member {Date} realEnd
 */
TimeSeries.prototype['realEnd'] = undefined;


// Implement TimeSeriesCore interface:
/**
 * @member {String} tsid
 */
TimeSeriesCore.prototype['tsid'] = undefined;
/**
 * @member {String} collId
 */
TimeSeriesCore.prototype['collId'] = undefined;
/**
 * @member {module:model/DType} dtype
 */
TimeSeriesCore.prototype['dtype'] = undefined;
/**
 * parameters of data type, e.g. enum
 * @member {Object} dparams
 */
TimeSeriesCore.prototype['dparams'] = undefined;
/**
 * @member {module:model/IType} itype
 */
TimeSeriesCore.prototype['itype'] = undefined;
/**
 * @member {module:model/Frequency} freq
 */
TimeSeriesCore.prototype['freq'] = undefined;
/**
 * parameters of time index type, e.g. time zone if applicable, pivot date, etc
 * @member {Object} fparams
 */
TimeSeriesCore.prototype['fparams'] = undefined;
/**
 * Entity is used in panel data to associate time series with a unit or individual, e.g. household or company, etc. It is used together with variable name to create a unique reference to time series in a panel collection, (entity, variable). Entity is immutable
 * @member {Number} entity
 */
TimeSeriesCore.prototype['entity'] = undefined;
/**
 * variable is used in panel data to associate time series with a cross-sectional measure, e.g. eye color, etc. It is used together with variable name to create a unique reference to time series in a panel collection, (entity, variable). Variable is immutable
 * @member {String} variable
 */
TimeSeriesCore.prototype['variable'] = undefined;
// Implement TSI interface:
/**
 * Time Series Identifier as a string where ts name, collection name and space name as separated by comma
 * @member {String} tsi
 */
TSI.prototype['tsi'] = undefined;
/**
 * @member {String} space
 */
TSI.prototype['space'] = undefined;
/**
 * @member {String} collection
 */
TSI.prototype['collection'] = undefined;
/**
 * unique series name in a collection
 * @member {String} name
 */
TSI.prototype['name'] = undefined;
// Implement TimeSeriesUpdate interface:
/**
 * unique series name in a collection
 * @member {String} name
 */
TimeSeriesUpdate.prototype['name'] = undefined;
/**
 * units of values
 * @member {Object} unit
 */
TimeSeriesUpdate.prototype['unit'] = undefined;
/**
 * Title of time series
 * @member {String} title
 */
TimeSeriesUpdate.prototype['title'] = undefined;
/**
 * Detail description of time series
 * @member {String} description
 */
TimeSeriesUpdate.prototype['description'] = undefined;
/**
 * Time series, which are no longer recorded can be marked as discontinued. Discontinued series can be kept in the database for historical reasons
 * @member {Boolean} discontinued
 */
TimeSeriesUpdate.prototype['discontinued'] = undefined;
/**
 * Legend for observation status; it maps integer to a status string, e.g. 1 -> preliminary, 2-> projected, etc.
 * @member {Object} legend
 */
TimeSeriesUpdate.prototype['legend'] = undefined;
/**
 * Time series attributes are key-value pairs used to store meta information about the series, e.g. location, region, category, etc. Note that units and discontinued properties are explicitly 
 * @member {Object} attributes
 */
TimeSeriesUpdate.prototype['attributes'] = undefined;
// Implement TimeSeriesAllOf interface:
/**
 * @member {Date} realStart
 */
TimeSeriesAllOf.prototype['realStart'] = undefined;
/**
 * @member {Date} realEnd
 */
TimeSeriesAllOf.prototype['realEnd'] = undefined;




export default TimeSeries;

