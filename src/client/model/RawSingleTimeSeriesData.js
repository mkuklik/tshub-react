/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DType from './DType';
import Frequency from './Frequency';
import IType from './IType';
import RawIndexFormat from './RawIndexFormat';
import RawSingleTimeSeriesDataVintage from './RawSingleTimeSeriesDataVintage';

/**
 * The RawSingleTimeSeriesData model module.
 * @module model/RawSingleTimeSeriesData
 * @version 0.1
 */
class RawSingleTimeSeriesData {
    /**
     * Constructs a new <code>RawSingleTimeSeriesData</code>.
     * Raw Single time series data, internal use only
     * @alias module:model/RawSingleTimeSeriesData
     */
    constructor() { 
        
        RawSingleTimeSeriesData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RawSingleTimeSeriesData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RawSingleTimeSeriesData} obj Optional instance to populate.
     * @return {module:model/RawSingleTimeSeriesData} The populated <code>RawSingleTimeSeriesData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RawSingleTimeSeriesData();

            if (data.hasOwnProperty('tsid')) {
                obj['tsid'] = ApiClient.convertToType(data['tsid'], 'String');
            }
            if (data.hasOwnProperty('collId')) {
                obj['collId'] = ApiClient.convertToType(data['collId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nobs')) {
                obj['nobs'] = ApiClient.convertToType(data['nobs'], 'Number');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], ['Number']);
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [Object]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], ['Number']);
            }
            if (data.hasOwnProperty('indexFormat')) {
                obj['indexFormat'] = RawIndexFormat.constructFromObject(data['indexFormat']);
            }
            if (data.hasOwnProperty('dtype')) {
                obj['dtype'] = DType.constructFromObject(data['dtype']);
            }
            if (data.hasOwnProperty('dparams')) {
                obj['dparams'] = ApiClient.convertToType(data['dparams'], Object);
            }
            if (data.hasOwnProperty('itype')) {
                obj['itype'] = IType.constructFromObject(data['itype']);
            }
            if (data.hasOwnProperty('freq')) {
                obj['freq'] = Frequency.constructFromObject(data['freq']);
            }
            if (data.hasOwnProperty('fparams')) {
                obj['fparams'] = ApiClient.convertToType(data['fparams'], Object);
            }
            if (data.hasOwnProperty('vintage')) {
                obj['vintage'] = RawSingleTimeSeriesDataVintage.constructFromObject(data['vintage']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} tsid
 */
RawSingleTimeSeriesData.prototype['tsid'] = undefined;

/**
 * @member {String} collId
 */
RawSingleTimeSeriesData.prototype['collId'] = undefined;

/**
 * time series unique name in a collection
 * @member {String} name
 */
RawSingleTimeSeriesData.prototype['name'] = undefined;

/**
 * number of observations
 * @member {Number} nobs
 */
RawSingleTimeSeriesData.prototype['nobs'] = undefined;

/**
 * @member {Array.<Number>} index
 */
RawSingleTimeSeriesData.prototype['index'] = undefined;

/**
 * @member {Array.<Object>} values
 */
RawSingleTimeSeriesData.prototype['values'] = undefined;

/**
 * @member {Array.<Number>} status
 */
RawSingleTimeSeriesData.prototype['status'] = undefined;

/**
 * @member {module:model/RawIndexFormat} indexFormat
 */
RawSingleTimeSeriesData.prototype['indexFormat'] = undefined;

/**
 * @member {module:model/DType} dtype
 */
RawSingleTimeSeriesData.prototype['dtype'] = undefined;

/**
 * @member {Object} dparams
 */
RawSingleTimeSeriesData.prototype['dparams'] = undefined;

/**
 * @member {module:model/IType} itype
 */
RawSingleTimeSeriesData.prototype['itype'] = undefined;

/**
 * @member {module:model/Frequency} freq
 */
RawSingleTimeSeriesData.prototype['freq'] = undefined;

/**
 * @member {Object} fparams
 */
RawSingleTimeSeriesData.prototype['fparams'] = undefined;

/**
 * @member {module:model/RawSingleTimeSeriesDataVintage} vintage
 */
RawSingleTimeSeriesData.prototype['vintage'] = undefined;






export default RawSingleTimeSeriesData;

