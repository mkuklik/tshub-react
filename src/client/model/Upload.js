/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UploadMessage from './UploadMessage';
import UploadMethod from './UploadMethod';
import UserSummary from './UserSummary';

/**
 * The Upload model module.
 * @module model/Upload
 * @version 0.1
 */
class Upload {
    /**
     * Constructs a new <code>Upload</code>.
     * @alias module:model/Upload
     */
    constructor() { 
        
        Upload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Upload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Upload} obj Optional instance to populate.
     * @return {module:model/Upload} The populated <code>Upload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Upload();

            if (data.hasOwnProperty('upload_id')) {
                obj['upload_id'] = ApiClient.convertToType(data['upload_id'], 'String');
            }
            if (data.hasOwnProperty('upload_url')) {
                obj['upload_url'] = ApiClient.convertToType(data['upload_url'], 'String');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = UploadMethod.constructFromObject(data['method']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('vintage_name')) {
                obj['vintage_name'] = ApiClient.convertToType(data['vintage_name'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('fileType')) {
                obj['fileType'] = ApiClient.convertToType(data['fileType'], 'String');
            }
            if (data.hasOwnProperty('fileSize')) {
                obj['fileSize'] = ApiClient.convertToType(data['fileSize'], 'Number');
            }
            if (data.hasOwnProperty('fileLastModified')) {
                obj['fileLastModified'] = ApiClient.convertToType(data['fileLastModified'], 'Date');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [UploadMessage]);
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], [UploadMessage]);
            }
            if (data.hasOwnProperty('updatedOn')) {
                obj['updatedOn'] = ApiClient.convertToType(data['updatedOn'], 'Date');
            }
            if (data.hasOwnProperty('createdOn')) {
                obj['createdOn'] = ApiClient.convertToType(data['createdOn'], 'Date');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = UserSummary.constructFromObject(data['createdBy']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('vid')) {
                obj['vid'] = ApiClient.convertToType(data['vid'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} upload_id
 */
Upload.prototype['upload_id'] = undefined;

/**
 * @member {String} upload_url
 */
Upload.prototype['upload_url'] = undefined;

/**
 * @member {module:model/UploadMethod} method
 */
Upload.prototype['method'] = undefined;

/**
 * @member {String} description
 */
Upload.prototype['description'] = undefined;

/**
 * @member {String} vintage_name
 */
Upload.prototype['vintage_name'] = undefined;

/**
 * @member {String} filename
 */
Upload.prototype['filename'] = undefined;

/**
 * @member {String} fileType
 */
Upload.prototype['fileType'] = undefined;

/**
 * @member {Number} fileSize
 */
Upload.prototype['fileSize'] = undefined;

/**
 * @member {Date} fileLastModified
 */
Upload.prototype['fileLastModified'] = undefined;

/**
 * @member {Array.<module:model/UploadMessage>} errors
 */
Upload.prototype['errors'] = undefined;

/**
 * @member {Array.<module:model/UploadMessage>} warnings
 */
Upload.prototype['warnings'] = undefined;

/**
 * @member {Date} updatedOn
 */
Upload.prototype['updatedOn'] = undefined;

/**
 * @member {Date} createdOn
 */
Upload.prototype['createdOn'] = undefined;

/**
 * @member {module:model/UserSummary} createdBy
 */
Upload.prototype['createdBy'] = undefined;

/**
 * status
 * @member {module:model/Upload.StatusEnum} status
 */
Upload.prototype['status'] = undefined;

/**
 * vintage id
 * @member {String} vid
 */
Upload.prototype['vid'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Upload['StatusEnum'] = {

    /**
     * value: "initiated"
     * @const
     */
    "initiated": "initiated",

    /**
     * value: "uploading"
     * @const
     */
    "uploading": "uploading",

    /**
     * value: "uploaded"
     * @const
     */
    "uploaded": "uploaded",

    /**
     * value: "processing"
     * @const
     */
    "processing": "processing",

    /**
     * value: "processed_successful"
     * @const
     */
    "processed_successful": "processed_successful",

    /**
     * value: "processed_failed"
     * @const
     */
    "processed_failed": "processed_failed",

    /**
     * value: "staging"
     * @const
     */
    "staging": "staging",

    /**
     * value: "committed"
     * @const
     */
    "committed": "committed"
};



export default Upload;

