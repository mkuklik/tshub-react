/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AnnotationUpdate model module.
 * @module model/AnnotationUpdate
 * @version 0.1
 */
class AnnotationUpdate {
    /**
     * Constructs a new <code>AnnotationUpdate</code>.
     * AnnotationUpdate is a body used to is a string containing additional information about observations or series. It is like a footnote or note in a statistical table.
     * @alias module:model/AnnotationUpdate
     */
    constructor() { 
        
        AnnotationUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnnotationUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnnotationUpdate} obj Optional instance to populate.
     * @return {module:model/AnnotationUpdate} The populated <code>AnnotationUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnnotationUpdate();

            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': Object});
            }
        }
        return obj;
    }


}

/**
 * annotation symbol
 * @member {String} symbol
 */
AnnotationUpdate.prototype['symbol'] = undefined;

/**
 * @member {String} text
 */
AnnotationUpdate.prototype['text'] = undefined;

/**
 * @member {module:model/AnnotationUpdate.FormatEnum} format
 */
AnnotationUpdate.prototype['format'] = undefined;

/**
 * json-type object can be added to annotation to store some extra data or metadata
 * @member {Object.<String, Object>} attributes
 */
AnnotationUpdate.prototype['attributes'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
AnnotationUpdate['FormatEnum'] = {

    /**
     * value: "txt"
     * @const
     */
    "txt": "txt",

    /**
     * value: "md"
     * @const
     */
    "md": "md"
};



export default AnnotationUpdate;

