/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnnotationTarget from './AnnotationTarget';

/**
 * The AnnotationSummary model module.
 * @module model/AnnotationSummary
 * @version 0.1
 */
class AnnotationSummary {
    /**
     * Constructs a new <code>AnnotationSummary</code>.
     * Annotation is a string containing additional information about observations or series. It is like a footnote or note in a statistical table.
     * @alias module:model/AnnotationSummary
     */
    constructor() { 
        
        AnnotationSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnnotationSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnnotationSummary} obj Optional instance to populate.
     * @return {module:model/AnnotationSummary} The populated <code>AnnotationSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnnotationSummary();

            if (data.hasOwnProperty('coll_id')) {
                obj['coll_id'] = ApiClient.convertToType(data['coll_id'], 'String');
            }
            if (data.hasOwnProperty('aid')) {
                obj['aid'] = ApiClient.convertToType(data['aid'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('targets')) {
                obj['targets'] = ApiClient.convertToType(data['targets'], [AnnotationTarget]);
            }
            if (data.hasOwnProperty('realStart')) {
                obj['realStart'] = ApiClient.convertToType(data['realStart'], 'Date');
            }
            if (data.hasOwnProperty('realEnd')) {
                obj['realEnd'] = ApiClient.convertToType(data['realEnd'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * @member {String} coll_id
 */
AnnotationSummary.prototype['coll_id'] = undefined;

/**
 * @member {String} aid
 */
AnnotationSummary.prototype['aid'] = undefined;

/**
 * annotation symbol
 * @member {String} symbol
 */
AnnotationSummary.prototype['symbol'] = undefined;

/**
 * @member {String} text
 */
AnnotationSummary.prototype['text'] = undefined;

/**
 * @member {module:model/AnnotationSummary.FormatEnum} format
 */
AnnotationSummary.prototype['format'] = undefined;

/**
 * annotated targets
 * @member {Array.<module:model/AnnotationTarget>} targets
 */
AnnotationSummary.prototype['targets'] = undefined;

/**
 * @member {Date} realStart
 */
AnnotationSummary.prototype['realStart'] = undefined;

/**
 * @member {Date} realEnd
 */
AnnotationSummary.prototype['realEnd'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
AnnotationSummary['FormatEnum'] = {

    /**
     * value: "txt"
     * @const
     */
    "txt": "txt",

    /**
     * value: "md"
     * @const
     */
    "md": "md"
};



export default AnnotationSummary;

