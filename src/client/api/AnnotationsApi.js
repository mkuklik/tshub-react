/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Annotation from '../model/Annotation';
import AnnotationUpdate from '../model/AnnotationUpdate';
import Frequency from '../model/Frequency';

/**
* Annotations service.
* @module api/AnnotationsApi
* @version 0.1
*/
export default class AnnotationsApi {

    /**
    * Constructs a new AnnotationsApi. 
    * @alias module:api/AnnotationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiAnnotationAddTarget operation.
     * @callback module:api/AnnotationsApi~appApiAnnotationAddTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Annotation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add observation target
     * Add observation target
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {String} symbol annotation symbol
     * @param {Object} opts Optional parameters
     * @param {String} opts.tsid time series id
     * @param {Number} opts.index time series index
     * @param {module:model/Frequency} opts.freq frequency
     * @param {String} opts.vid vintage id
     * @param {module:api/AnnotationsApi~appApiAnnotationAddTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Annotation}
     */
    appApiAnnotationAddTarget(spaceName, collName, symbol, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiAnnotationAddTarget");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiAnnotationAddTarget");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling appApiAnnotationAddTarget");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName,
        'symbol': symbol
      };
      let queryParams = {
        'tsid': opts['tsid'],
        'index': opts['index'],
        'freq': opts['freq'],
        'vid': opts['vid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Annotation;
      return this.apiClient.callApi(
        '/annotation/{space_name}/{coll_name}/{symbol}/targets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiAnnotationCreate operation.
     * @callback module:api/AnnotationsApi~appApiAnnotationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Annotation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an annotation
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {module:model/Annotation} annotation Annotation
     * @param {module:api/AnnotationsApi~appApiAnnotationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Annotation}
     */
    appApiAnnotationCreate(spaceName, collName, annotation, callback) {
      let postBody = annotation;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiAnnotationCreate");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiAnnotationCreate");
      }
      // verify the required parameter 'annotation' is set
      if (annotation === undefined || annotation === null) {
        throw new Error("Missing the required parameter 'annotation' when calling appApiAnnotationCreate");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Annotation;
      return this.apiClient.callApi(
        '/annotation/{space_name}/{coll_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiAnnotationDelete operation.
     * @callback module:api/AnnotationsApi~appApiAnnotationDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete annotation
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {String} symbol annotation symbol
     * @param {module:api/AnnotationsApi~appApiAnnotationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiAnnotationDelete(spaceName, collName, symbol, callback) {
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiAnnotationDelete");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiAnnotationDelete");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling appApiAnnotationDelete");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName,
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/annotation/{space_name}/{coll_name}/{symbol}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiAnnotationGet operation.
     * @callback module:api/AnnotationsApi~appApiAnnotationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Annotation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an annotation
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {String} symbol annotation symbol
     * @param {module:api/AnnotationsApi~appApiAnnotationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Annotation}
     */
    appApiAnnotationGet(spaceName, collName, symbol, callback) {
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiAnnotationGet");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiAnnotationGet");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling appApiAnnotationGet");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName,
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Annotation;
      return this.apiClient.callApi(
        '/annotation/{space_name}/{coll_name}/{symbol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiAnnotationGetList operation.
     * @callback module:api/AnnotationsApi~appApiAnnotationGetListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Annotation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List annotations
     * List annotations
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {module:api/AnnotationsApi~appApiAnnotationGetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Annotation>}
     */
    appApiAnnotationGetList(spaceName, collName, callback) {
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiAnnotationGetList");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiAnnotationGetList");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Annotation];
      return this.apiClient.callApi(
        '/annotation/{space_name}/{coll_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiAnnotationRemoveTarget operation.
     * @callback module:api/AnnotationsApi~appApiAnnotationRemoveTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Annotation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete observation targets
     * delete observation targets
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {String} symbol annotation symbol
     * @param {Object} opts Optional parameters
     * @param {String} opts.tsid time series id
     * @param {Number} opts.index time series index
     * @param {module:model/Frequency} opts.freq frequency
     * @param {String} opts.vid vintage id
     * @param {module:api/AnnotationsApi~appApiAnnotationRemoveTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Annotation}
     */
    appApiAnnotationRemoveTarget(spaceName, collName, symbol, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiAnnotationRemoveTarget");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiAnnotationRemoveTarget");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling appApiAnnotationRemoveTarget");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName,
        'symbol': symbol
      };
      let queryParams = {
        'tsid': opts['tsid'],
        'index': opts['index'],
        'freq': opts['freq'],
        'vid': opts['vid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Annotation;
      return this.apiClient.callApi(
        '/annotation/{space_name}/{coll_name}/{symbol}/targets', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiAnnotationUpdate operation.
     * @callback module:api/AnnotationsApi~appApiAnnotationUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an annotation
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {String} symbol annotation symbol
     * @param {module:model/AnnotationUpdate} annotationUpdate Annotation
     * @param {module:api/AnnotationsApi~appApiAnnotationUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiAnnotationUpdate(spaceName, collName, symbol, annotationUpdate, callback) {
      let postBody = annotationUpdate;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiAnnotationUpdate");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiAnnotationUpdate");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling appApiAnnotationUpdate");
      }
      // verify the required parameter 'annotationUpdate' is set
      if (annotationUpdate === undefined || annotationUpdate === null) {
        throw new Error("Missing the required parameter 'annotationUpdate' when calling appApiAnnotationUpdate");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName,
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/annotation/{space_name}/{coll_name}/{symbol}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
