/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TimeSeries from '../model/TimeSeries';
import TimeSeriesSummary from '../model/TimeSeriesSummary';
import TimeSeriesUpdate from '../model/TimeSeriesUpdate';

/**
* RawTimeSeries service.
* @module api/RawTimeSeriesApi
* @version 0.1
*/
export default class RawTimeSeriesApi {

    /**
    * Constructs a new RawTimeSeriesApi. 
    * @alias module:api/RawTimeSeriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiTimeseriesRawDelete operation.
     * @callback module:api/RawTimeSeriesApi~appApiTimeseriesRawDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a time series
     * delete time series
     * @param {String} collId collection id
     * @param {String} tsid time series id
     * @param {module:api/RawTimeSeriesApi~appApiTimeseriesRawDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiTimeseriesRawDelete(collId, tsid, callback) {
      let postBody = null;
      // verify the required parameter 'collId' is set
      if (collId === undefined || collId === null) {
        throw new Error("Missing the required parameter 'collId' when calling appApiTimeseriesRawDelete");
      }
      // verify the required parameter 'tsid' is set
      if (tsid === undefined || tsid === null) {
        throw new Error("Missing the required parameter 'tsid' when calling appApiTimeseriesRawDelete");
      }

      let pathParams = {
        'collId': collId,
        'tsid': tsid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/raw/timeseries/{collId}/{tsid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiTimeseriesRawGet operation.
     * @callback module:api/RawTimeSeriesApi~appApiTimeseriesRawGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeSeries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve time series info
     * Retrieve time series info
     * @param {String} collId collection id
     * @param {String} tsid time series id
     * @param {module:api/RawTimeSeriesApi~appApiTimeseriesRawGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeSeries}
     */
    appApiTimeseriesRawGet(collId, tsid, callback) {
      let postBody = null;
      // verify the required parameter 'collId' is set
      if (collId === undefined || collId === null) {
        throw new Error("Missing the required parameter 'collId' when calling appApiTimeseriesRawGet");
      }
      // verify the required parameter 'tsid' is set
      if (tsid === undefined || tsid === null) {
        throw new Error("Missing the required parameter 'tsid' when calling appApiTimeseriesRawGet");
      }

      let pathParams = {
        'collId': collId,
        'tsid': tsid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimeSeries;
      return this.apiClient.callApi(
        '/raw/timeseries/{collId}/{tsid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiTimeseriesRawGetList operation.
     * @callback module:api/RawTimeSeriesApi~appApiTimeseriesRawGetListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimeSeriesSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List time series in a collection
     * List time series in a collection
     * @param {String} collId collection id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.tsids array of time series id
     * @param {module:api/RawTimeSeriesApi~appApiTimeseriesRawGetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimeSeriesSummary>}
     */
    appApiTimeseriesRawGetList(collId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collId' is set
      if (collId === undefined || collId === null) {
        throw new Error("Missing the required parameter 'collId' when calling appApiTimeseriesRawGetList");
      }

      let pathParams = {
        'collId': collId
      };
      let queryParams = {
        'tsids': this.apiClient.buildCollectionParam(opts['tsids'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TimeSeriesSummary];
      return this.apiClient.callApi(
        '/raw/timeseries/{collId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiTimeseriesRawObjectHistory operation.
     * @callback module:api/RawTimeSeriesApi~appApiTimeseriesRawObjectHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieve historical values
     * @param {String} collId collection id
     * @param {String} tsid time series id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.realStart start time from when values were valid
     * @param {Date} opts.realEnd end time until when values were valid
     * @param {module:api/RawTimeSeriesApi~appApiTimeseriesRawObjectHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    appApiTimeseriesRawObjectHistory(collId, tsid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collId' is set
      if (collId === undefined || collId === null) {
        throw new Error("Missing the required parameter 'collId' when calling appApiTimeseriesRawObjectHistory");
      }
      // verify the required parameter 'tsid' is set
      if (tsid === undefined || tsid === null) {
        throw new Error("Missing the required parameter 'tsid' when calling appApiTimeseriesRawObjectHistory");
      }

      let pathParams = {
        'collId': collId,
        'tsid': tsid
      };
      let queryParams = {
        'realStart': opts['realStart'],
        'realEnd': opts['realEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/raw/timeseries/{collId}/{tsid}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiTimeseriesRawPermanentDelete operation.
     * @callback module:api/RawTimeSeriesApi~appApiTimeseriesRawPermanentDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieve historical values
     * @param {String} collId collection id
     * @param {String} tsid time series id
     * @param {module:api/RawTimeSeriesApi~appApiTimeseriesRawPermanentDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiTimeseriesRawPermanentDelete(collId, tsid, callback) {
      let postBody = null;
      // verify the required parameter 'collId' is set
      if (collId === undefined || collId === null) {
        throw new Error("Missing the required parameter 'collId' when calling appApiTimeseriesRawPermanentDelete");
      }
      // verify the required parameter 'tsid' is set
      if (tsid === undefined || tsid === null) {
        throw new Error("Missing the required parameter 'tsid' when calling appApiTimeseriesRawPermanentDelete");
      }

      let pathParams = {
        'collId': collId,
        'tsid': tsid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/raw/timeseries/{collId}/{tsid}/permanent', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiTimeseriesRawPost operation.
     * @callback module:api/RawTimeSeriesApi~appApiTimeseriesRawPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeSeries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new time series
     * @param {String} collId collection id
     * @param {module:model/TimeSeries} timeSeries Time series parameters. dtype and freq are required
     * @param {module:api/RawTimeSeriesApi~appApiTimeseriesRawPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeSeries}
     */
    appApiTimeseriesRawPost(collId, timeSeries, callback) {
      let postBody = timeSeries;
      // verify the required parameter 'collId' is set
      if (collId === undefined || collId === null) {
        throw new Error("Missing the required parameter 'collId' when calling appApiTimeseriesRawPost");
      }
      // verify the required parameter 'timeSeries' is set
      if (timeSeries === undefined || timeSeries === null) {
        throw new Error("Missing the required parameter 'timeSeries' when calling appApiTimeseriesRawPost");
      }

      let pathParams = {
        'collId': collId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TimeSeries;
      return this.apiClient.callApi(
        '/raw/timeseries/{collId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiTimeseriesRawPut operation.
     * @callback module:api/RawTimeSeriesApi~appApiTimeseriesRawPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeSeries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing time series info
     * Update existing time series info
     * @param {String} collId collection id
     * @param {String} tsid time series id
     * @param {module:model/TimeSeriesUpdate} timeSeriesUpdate Time series updated info
     * @param {module:api/RawTimeSeriesApi~appApiTimeseriesRawPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeSeries}
     */
    appApiTimeseriesRawPut(collId, tsid, timeSeriesUpdate, callback) {
      let postBody = timeSeriesUpdate;
      // verify the required parameter 'collId' is set
      if (collId === undefined || collId === null) {
        throw new Error("Missing the required parameter 'collId' when calling appApiTimeseriesRawPut");
      }
      // verify the required parameter 'tsid' is set
      if (tsid === undefined || tsid === null) {
        throw new Error("Missing the required parameter 'tsid' when calling appApiTimeseriesRawPut");
      }
      // verify the required parameter 'timeSeriesUpdate' is set
      if (timeSeriesUpdate === undefined || timeSeriesUpdate === null) {
        throw new Error("Missing the required parameter 'timeSeriesUpdate' when calling appApiTimeseriesRawPut");
      }

      let pathParams = {
        'collId': collId,
        'tsid': tsid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TimeSeries;
      return this.apiClient.callApi(
        '/raw/timeseries/{collId}/{tsid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiTimeseriesRawUndelete operation.
     * @callback module:api/RawTimeSeriesApi~appApiTimeseriesRawUndeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieve historical values
     * @param {String} collId collection id
     * @param {String} tsid time series id
     * @param {Object} opts Optional parameters
     * @param {String} opts.name new name for the time series
     * @param {module:api/RawTimeSeriesApi~appApiTimeseriesRawUndeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiTimeseriesRawUndelete(collId, tsid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collId' is set
      if (collId === undefined || collId === null) {
        throw new Error("Missing the required parameter 'collId' when calling appApiTimeseriesRawUndelete");
      }
      // verify the required parameter 'tsid' is set
      if (tsid === undefined || tsid === null) {
        throw new Error("Missing the required parameter 'tsid' when calling appApiTimeseriesRawUndelete");
      }

      let pathParams = {
        'collId': collId,
        'tsid': tsid
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/raw/timeseries/{collId}/{tsid}/undelete', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
