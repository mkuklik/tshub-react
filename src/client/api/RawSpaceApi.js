/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Space from '../model/Space';
import SpaceHistorical from '../model/SpaceHistorical';
import SpaceMemberPost from '../model/SpaceMemberPost';
import Visibility from '../model/Visibility';

/**
* RawSpace service.
* @module api/RawSpaceApi
* @version 0.1
*/
export default class RawSpaceApi {

    /**
    * Constructs a new RawSpaceApi. 
    * @alias module:api/RawSpaceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiSpaceObjectHistory operation.
     * @callback module:api/RawSpaceApi~appApiSpaceObjectHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SpaceHistorical>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieve history of space object by its id, space_id
     * retrieve history of space object by its id, space_id
     * @param {String} spaceId space id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.realStart start time from when values were valid
     * @param {Date} opts.realEnd end time until when values were valid
     * @param {module:api/RawSpaceApi~appApiSpaceObjectHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SpaceHistorical>}
     */
    appApiSpaceObjectHistory(spaceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling appApiSpaceObjectHistory");
      }

      let pathParams = {
        'spaceId': spaceId
      };
      let queryParams = {
        'realStart': opts['realStart'],
        'realEnd': opts['realEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SpaceHistorical];
      return this.apiClient.callApi(
        '/raw/space/{spaceId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiSpaceRawAddMember operation.
     * @callback module:api/RawSpaceApi~appApiSpaceRawAddMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new space member
     * Add a new space member
     * @param {String} spaceId space id
     * @param {Object} opts Optional parameters
     * @param {module:model/SpaceMemberPost} opts.spaceMemberPost space member details
     * @param {module:api/RawSpaceApi~appApiSpaceRawAddMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    appApiSpaceRawAddMember(spaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['spaceMemberPost'];
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling appApiSpaceRawAddMember");
      }

      let pathParams = {
        'spaceId': spaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/raw/space/{spaceId}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiSpaceRawDelete operation.
     * @callback module:api/RawSpaceApi~appApiSpaceRawDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a space
     * Delete a space
     * @param {String} spaceId space id
     * @param {module:api/RawSpaceApi~appApiSpaceRawDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiSpaceRawDelete(spaceId, callback) {
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling appApiSpaceRawDelete");
      }

      let pathParams = {
        'spaceId': spaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/raw/space/{spaceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiSpaceRawDeleteMember operation.
     * @callback module:api/RawSpaceApi~appApiSpaceRawDeleteMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a space member
     * Delete a space member
     * @param {String} spaceId space id
     * @param {module:model/String} type | format of output type * `u` user, * `g` group 
     * @param {String} id id
     * @param {module:api/RawSpaceApi~appApiSpaceRawDeleteMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    appApiSpaceRawDeleteMember(spaceId, type, id, callback) {
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling appApiSpaceRawDeleteMember");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling appApiSpaceRawDeleteMember");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appApiSpaceRawDeleteMember");
      }

      let pathParams = {
        'spaceId': spaceId,
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/raw/space/{spaceId}/members/{type}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiSpaceRawGet operation.
     * @callback module:api/RawSpaceApi~appApiSpaceRawGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get space details
     * Get space details
     * @param {String} spaceId space id
     * @param {module:api/RawSpaceApi~appApiSpaceRawGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    appApiSpaceRawGet(spaceId, callback) {
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling appApiSpaceRawGet");
      }

      let pathParams = {
        'spaceId': spaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/raw/space/{spaceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiSpaceRawGetList operation.
     * @callback module:api/RawSpaceApi~appApiSpaceRawGetListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Space>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list spaces
     * list spaces
     * @param {Object} opts Optional parameters
     * @param {String} opts.member a member of group/space/collection/etc.
     * @param {Boolean} opts.ownOnly ownOnly
     * @param {module:model/Visibility} opts.visibility visibility
     * @param {String} opts.query Search query
     * @param {module:api/RawSpaceApi~appApiSpaceRawGetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Space>}
     */
    appApiSpaceRawGetList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'member': opts['member'],
        'ownOnly': opts['ownOnly'],
        'visibility': opts['visibility'],
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Space];
      return this.apiClient.callApi(
        '/raw/space', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiSpaceRawPost operation.
     * @callback module:api/RawSpaceApi~appApiSpaceRawPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new space
     * Create a new space
     * @param {module:model/Space} space Space definition
     * @param {module:api/RawSpaceApi~appApiSpaceRawPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    appApiSpaceRawPost(space, callback) {
      let postBody = space;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling appApiSpaceRawPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/raw/space', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiSpaceRawPut operation.
     * @callback module:api/RawSpaceApi~appApiSpaceRawPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing space
     * @param {String} spaceId space id
     * @param {module:model/Space} space Optional description in *Markdown*
     * @param {module:api/RawSpaceApi~appApiSpaceRawPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    appApiSpaceRawPut(spaceId, space, callback) {
      let postBody = space;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling appApiSpaceRawPut");
      }
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling appApiSpaceRawPut");
      }

      let pathParams = {
        'spaceId': spaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/raw/space/{spaceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiSpaceRawUndelete operation.
     * @callback module:api/RawSpaceApi~appApiSpaceRawUndeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Undelete space
     * Undelete space
     * @param {String} spaceId space id
     * @param {Object} opts Optional parameters
     * @param {String} opts.name new name for space
     * @param {module:api/RawSpaceApi~appApiSpaceRawUndeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiSpaceRawUndelete(spaceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling appApiSpaceRawUndelete");
      }

      let pathParams = {
        'spaceId': spaceId
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/raw/space/{spaceId}/undelete', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
