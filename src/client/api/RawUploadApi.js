/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DType from '../model/DType';
import IType from '../model/IType';
import InlineResponse200 from '../model/InlineResponse200';
import Upload from '../model/Upload';
import UploadMethod from '../model/UploadMethod';

/**
* RawUpload service.
* @module api/RawUploadApi
* @version 0.1
*/
export default class RawUploadApi {

    /**
    * Constructs a new RawUploadApi. 
    * @alias module:api/RawUploadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiUploadConfirmUpload operation.
     * @callback module:api/RawUploadApi~appApiUploadConfirmUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Upload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * confirmation of finishing uploading file
     * client makes this call to confirm upload and trigger next step in processing
     * @param {String} uploadId upload_id
     * @param {module:api/RawUploadApi~appApiUploadConfirmUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Upload}
     */
    appApiUploadConfirmUpload(uploadId, callback) {
      let postBody = null;
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling appApiUploadConfirmUpload");
      }

      let pathParams = {
        'upload_id': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Upload;
      return this.apiClient.callApi(
        '/raw/upload/{upload_id}/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiUploadCreate operation.
     * @callback module:api/RawUploadApi~appApiUploadCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Upload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a new upload
     * create a new upload
     * @param {Object} opts Optional parameters
     * @param {String} opts.collId collection id
     * @param {module:model/UploadMethod} opts.method 
     * @param {String} opts.filename 
     * @param {String} opts.fileType 
     * @param {Date} opts.fileSize 
     * @param {Number} opts.lastModified last modified unix epoch
     * @param {String} opts.description 
     * @param {String} opts.vintageName 
     * @param {Boolean} opts.createMissing 
     * @param {Boolean} opts.dropnan 
     * @param {Boolean} opts.trimLeftEnd 
     * @param {Boolean} opts.trimRightEnd 
     * @param {module:model/IType} opts.itype 
     * @param {module:model/DType} opts.dtype 
     * @param {module:model/String} opts.freq  (default to 'auto')
     * @param {String} opts.format format of time index
     * @param {module:api/RawUploadApi~appApiUploadCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Upload}
     */
    appApiUploadCreate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'coll_id': opts['collId'],
        'method': opts['method'],
        'filename': opts['filename'],
        'fileType': opts['fileType'],
        'fileSize': opts['fileSize'],
        'lastModified': opts['lastModified'],
        'description': opts['description'],
        'vintage_name': opts['vintageName'],
        'create_missing': opts['createMissing'],
        'dropnan': opts['dropnan'],
        'trim_left_end': opts['trimLeftEnd'],
        'trim_right_end': opts['trimRightEnd'],
        'itype': opts['itype'],
        'dtype': opts['dtype'],
        'freq': opts['freq'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Upload;
      return this.apiClient.callApi(
        '/raw/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiUploadGet operation.
     * @callback module:api/RawUploadApi~appApiUploadGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Upload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieve upload object
     * retrieve upload object by its id
     * @param {String} uploadId upload_id
     * @param {module:api/RawUploadApi~appApiUploadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Upload}
     */
    appApiUploadGet(uploadId, callback) {
      let postBody = null;
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling appApiUploadGet");
      }

      let pathParams = {
        'upload_id': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Upload;
      return this.apiClient.callApi(
        '/raw/upload/{upload_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiUploadGetList operation.
     * @callback module:api/RawUploadApi~appApiUploadGetListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list upload objects
     * list upload objects
     * @param {Object} opts Optional parameters
     * @param {String} opts.collId collection id
     * @param {Number} opts.offset the first number of item to skip
     * @param {Number} opts.limit the number of items to return
     * @param {Date} opts.since since
     * @param {module:api/RawUploadApi~appApiUploadGetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    appApiUploadGetList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'coll_id': opts['collId'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'since': opts['since']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/raw/upload', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiUploadPostFile operation.
     * @callback module:api/RawUploadApi~appApiUploadPostFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * upload file for precessing
     * upload object by its id
     * @param {String} uploadId upload_id
     * @param {module:api/RawUploadApi~appApiUploadPostFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiUploadPostFile(uploadId, callback) {
      let postBody = null;
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling appApiUploadPostFile");
      }

      let pathParams = {
        'upload_id': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/raw/upload/{upload_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
