/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Space from '../model/Space';
import SpaceMemberPost from '../model/SpaceMemberPost';

/**
* Space service.
* @module api/SpaceApi
* @version 0.1
*/
export default class SpaceApi {

    /**
    * Constructs a new SpaceApi. 
    * @alias module:api/SpaceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiSpaceAddMember operation.
     * @callback module:api/SpaceApi~appApiSpaceAddMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a space member
     * Add a space member
     * @param {String} spaceName space name
     * @param {Object} opts Optional parameters
     * @param {module:model/SpaceMemberPost} opts.spaceMemberPost 
     * @param {module:api/SpaceApi~appApiSpaceAddMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    appApiSpaceAddMember(spaceName, opts, callback) {
      opts = opts || {};
      let postBody = opts['spaceMemberPost'];
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiSpaceAddMember");
      }

      let pathParams = {
        'space_name': spaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/space/{space_name}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiSpaceDelete operation.
     * @callback module:api/SpaceApi~appApiSpaceDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a space
     * Delete a space
     * @param {String} spaceName space name
     * @param {module:api/SpaceApi~appApiSpaceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiSpaceDelete(spaceName, callback) {
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiSpaceDelete");
      }

      let pathParams = {
        'space_name': spaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/space/{space_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiSpaceDeleteMember operation.
     * @callback module:api/SpaceApi~appApiSpaceDeleteMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a space member
     * Delete a space member
     * @param {String} spaceName space name
     * @param {module:model/String} type | format of output type * `u` user, * `g` group 
     * @param {String} memberName username or groupname
     * @param {module:api/SpaceApi~appApiSpaceDeleteMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    appApiSpaceDeleteMember(spaceName, type, memberName, callback) {
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiSpaceDeleteMember");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling appApiSpaceDeleteMember");
      }
      // verify the required parameter 'memberName' is set
      if (memberName === undefined || memberName === null) {
        throw new Error("Missing the required parameter 'memberName' when calling appApiSpaceDeleteMember");
      }

      let pathParams = {
        'space_name': spaceName,
        'type': type,
        'memberName': memberName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/space/{space_name}/members/{type}/{memberName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiSpaceGet operation.
     * @callback module:api/SpaceApi~appApiSpaceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get space details
     * Get space details
     * @param {String} spaceName space name
     * @param {module:api/SpaceApi~appApiSpaceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    appApiSpaceGet(spaceName, callback) {
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiSpaceGet");
      }

      let pathParams = {
        'space_name': spaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/space/{space_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiSpaceGetList operation.
     * @callback module:api/SpaceApi~appApiSpaceGetListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Space>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list spaces
     * @param {Object} opts Optional parameters
     * @param {String} opts.query Search query
     * @param {module:api/SpaceApi~appApiSpaceGetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Space>}
     */
    appApiSpaceGetList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Space];
      return this.apiClient.callApi(
        '/space', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiSpaceNameHistory operation.
     * @callback module:api/SpaceApi~appApiSpaceNameHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get historical values for space details
     * Get historical values for space details
     * @param {String} spaceName space name
     * @param {Object} opts Optional parameters
     * @param {Date} opts.realStart start time from when values were valid
     * @param {Date} opts.realEnd end time until when values were valid
     * @param {module:api/SpaceApi~appApiSpaceNameHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    appApiSpaceNameHistory(spaceName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiSpaceNameHistory");
      }

      let pathParams = {
        'space_name': spaceName
      };
      let queryParams = {
        'realStart': opts['realStart'],
        'realEnd': opts['realEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/space/{space_name}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiSpacePost operation.
     * @callback module:api/SpaceApi~appApiSpacePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new space
     * Create a new space
     * @param {module:model/Space} space Space definition
     * @param {module:api/SpaceApi~appApiSpacePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    appApiSpacePost(space, callback) {
      let postBody = space;
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling appApiSpacePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/space', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiSpacePut operation.
     * @callback module:api/SpaceApi~appApiSpacePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing space
     * @param {String} spaceName space name
     * @param {module:model/Space} space Optional description in *Markdown*
     * @param {module:api/SpaceApi~appApiSpacePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    appApiSpacePut(spaceName, space, callback) {
      let postBody = space;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiSpacePut");
      }
      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling appApiSpacePut");
      }

      let pathParams = {
        'space_name': spaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/space/{space_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
