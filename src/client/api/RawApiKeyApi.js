/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIKey from '../model/APIKey';

/**
* RawApiKey service.
* @module api/RawApiKeyApi
* @version 0.1
*/
export default class RawApiKeyApi {

    /**
    * Constructs a new RawApiKeyApi. 
    * @alias module:api/RawApiKeyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiApiKeyRawCreate operation.
     * @callback module:api/RawApiKeyApi~appApiApiKeyRawCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create API Key
     * Create API Key
     * @param {String} uid user id
     * @param {String} name friendly name to display
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.scopes api key scopes
     * @param {Number} opts.expiresIn number of days to expiry
     * @param {module:api/RawApiKeyApi~appApiApiKeyRawCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIKey}
     */
    appApiApiKeyRawCreate(uid, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling appApiApiKeyRawCreate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appApiApiKeyRawCreate");
      }

      let pathParams = {
        'uid': uid
      };
      let queryParams = {
        'name': name,
        'scopes': this.apiClient.buildCollectionParam(opts['scopes'], 'multi'),
        'expiresIn': opts['expiresIn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIKey;
      return this.apiClient.callApi(
        '/raw/user/{uid}/apikey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiApiKeyRawDelete operation.
     * @callback module:api/RawApiKeyApi~appApiApiKeyRawDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete API Key
     * Delete API Key
     * @param {String} uid user id
     * @param {String} name api key name
     * @param {module:api/RawApiKeyApi~appApiApiKeyRawDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiApiKeyRawDelete(uid, name, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling appApiApiKeyRawDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appApiApiKeyRawDelete");
      }

      let pathParams = {
        'uid': uid,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/raw/user/{uid}/apikey/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiApiKeyRawGetList operation.
     * @callback module:api/RawApiKeyApi~appApiApiKeyRawGetListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/APIKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List API Keys
     * List API Keys
     * @param {String} uid user id
     * @param {module:api/RawApiKeyApi~appApiApiKeyRawGetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/APIKey>}
     */
    appApiApiKeyRawGetList(uid, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling appApiApiKeyRawGetList");
      }

      let pathParams = {
        'uid': uid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [APIKey];
      return this.apiClient.callApi(
        '/raw/user/{uid}/apikey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
