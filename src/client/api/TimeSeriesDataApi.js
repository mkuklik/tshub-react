/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SingleTimeSeriesData from '../model/SingleTimeSeriesData';
import TSIList from '../model/TSIList';

/**
* TimeSeriesData service.
* @module api/TimeSeriesDataApi
* @version 0.1
*/
export default class TimeSeriesDataApi {

    /**
    * Constructs a new TimeSeriesDataApi. 
    * @alias module:api/TimeSeriesDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiTimeseriesDataDelete operation.
     * @callback module:api/TimeSeriesDataApi~appApiTimeseriesDataDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete observations
     * Delete observations from a time series
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {Array.<String>} names list of series names
     * @param {Array.<OneOfintegerstring>} index time index
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format Format of data time index * `string` a string represenation specific to each index type, e.g. 2000-01 for monthly index. * `iso` a string with iso representation of datetime '' * `s`   a number of seconds from unix epoch 1970-01-01 * `ms`  a number of milliseconds from unix epoch 1970-01-01 * `us`  a number of microseconds from unix epoch 1970-01-01 
     * @param {module:api/TimeSeriesDataApi~appApiTimeseriesDataDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiTimeseriesDataDelete(spaceName, collName, names, index, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiTimeseriesDataDelete");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiTimeseriesDataDelete");
      }
      // verify the required parameter 'names' is set
      if (names === undefined || names === null) {
        throw new Error("Missing the required parameter 'names' when calling appApiTimeseriesDataDelete");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling appApiTimeseriesDataDelete");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName
      };
      let queryParams = {
        'names': this.apiClient.buildCollectionParam(names, 'multi'),
        'index': this.apiClient.buildCollectionParam(index, 'multi'),
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiTimeseriesDataGet operation.
     * @callback module:api/TimeSeriesDataApi~appApiTimeseriesDataGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SingleTimeSeriesData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve time series data
     * Retrieve time series data
     * @param {module:model/TSIList} series list of time series identifiers
     * @param {Object} opts Optional parameters
     * @param {String} opts.periodStart start of time index range, format depends on the freq requested 
     * @param {String} opts.periodEnd end of time index range
     * @param {module:model/String} opts.transform Time series transformation * `none` - as is * `diff` - Use the last value of the time period. * `rdiff` - relative diff, i.e. % changes * `log` - natural log * `ldiff` - log diff, i.e. % changes * `norm` - normalized to 100 
     * @param {String} opts.freq frequency of returned series
     * @param {module:model/String} opts.toLowerMethod Method of converting to lower frequency. * `auto` - Determine the method based on the series classification. * `last` - Use the last value of the time period. * `first` - Use the first value of the time period. * `sum` - Aggregate the values of the time period. e.g. for flow type of variables * `pch` - Aggregate the percentage change over the period. * `mix` - Use the highest value in the time period. * `min` - Use the lowest value of the time period.  (default to 'auto')
     * @param {module:model/String} opts.toHigherMethod Method of converting to higher frequency. * `auto` - Determine the method based on the series classification. * `same` - Use the same value for the whole period. * `dist` - Divide equally over the time period. * `pch` - Distribute the percentage change over the period. * `linear` - Use a linear interpolation of the values from this to the next period. * `first` - Use the value for the first value of the period. * `quad` - Use quadratic interpolation to distribute the value over the period. * `cube` - Use a cubic interpolation of the values from this to the next period.  (default to 'auto')
     * @param {module:model/String} opts.missingMethod Method of filling in any missing values. * `none` - Do not fill in missing values. They will remain NaN in the value vector. * `auto` - Determine the method based on the series classification. * `previous` - Use the previous non-missing value. * `zero` - Use the value zero.  (default to 'none')
     * @param {Boolean} opts.merge Should merge time series (default to false)
     * @param {Date} opts.realtime real time as of which values were valid
     * @param {String} opts.vintage vintage tag used to identify real time when series was written.
     * @param {module:model/String} opts.output output type (default to 'json')
     * @param {module:model/String} opts.outputIndexType | format of output type * `auto` depending on output, * `string` string represenation as in * `epoch` integers specifying number of ms from unix epoch * `ISO` ISO8601 format 2008-09-15T15:53:00 (default to 'epoch')
     * @param {String} opts.outputIndexFormat format of output type
     * @param {Number} opts.offset the first number of item to skip
     * @param {Number} opts.limit the number of items to return
     * @param {module:api/TimeSeriesDataApi~appApiTimeseriesDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SingleTimeSeriesData>}
     */
    appApiTimeseriesDataGet(series, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'series' is set
      if (series === undefined || series === null) {
        throw new Error("Missing the required parameter 'series' when calling appApiTimeseriesDataGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'series': series,
        'periodStart': opts['periodStart'],
        'periodEnd': opts['periodEnd'],
        'transform': opts['transform'],
        'freq': opts['freq'],
        'toLowerMethod': opts['toLowerMethod'],
        'toHigherMethod': opts['toHigherMethod'],
        'missingMethod': opts['missingMethod'],
        'merge': opts['merge'],
        'realtime': opts['realtime'],
        'vintage': opts['vintage'],
        'output': opts['output'],
        'outputIndexType': opts['outputIndexType'],
        'outputIndexFormat': opts['outputIndexFormat'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SingleTimeSeriesData];
      return this.apiClient.callApi(
        '/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiTimeseriesDataPut operation.
     * @callback module:api/TimeSeriesDataApi~appApiTimeseriesDataPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save observations
     * Save observations of time series
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {Array.<module:model/SingleTimeSeriesData>} singleTimeSeriesData time series data
     * @param {module:api/TimeSeriesDataApi~appApiTimeseriesDataPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiTimeseriesDataPut(spaceName, collName, singleTimeSeriesData, callback) {
      let postBody = singleTimeSeriesData;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiTimeseriesDataPut");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiTimeseriesDataPut");
      }
      // verify the required parameter 'singleTimeSeriesData' is set
      if (singleTimeSeriesData === undefined || singleTimeSeriesData === null) {
        throw new Error("Missing the required parameter 'singleTimeSeriesData' when calling appApiTimeseriesDataPut");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
