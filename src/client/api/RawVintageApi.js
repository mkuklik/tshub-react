/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Vintage from '../model/Vintage';
import VintageHistorical from '../model/VintageHistorical';
import VintageSummary from '../model/VintageSummary';
import VintageUpdate from '../model/VintageUpdate';

/**
* RawVintage service.
* @module api/RawVintageApi
* @version 0.1
*/
export default class RawVintageApi {

    /**
    * Constructs a new RawVintageApi. 
    * @alias module:api/RawVintageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiVintagesGetListRaw operation.
     * @callback module:api/RawVintageApi~appApiVintagesGetListRawCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VintageSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List vintage tags in a collection 
     * List vintage tags in a collection
     * @param {String} collId collection id
     * @param {Object} opts Optional parameters
     * @param {String} opts.tsid time series id
     * @param {Date} opts.realtime realtime when values were valid
     * @param {module:api/RawVintageApi~appApiVintagesGetListRawCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VintageSummary>}
     */
    appApiVintagesGetListRaw(collId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collId' is set
      if (collId === undefined || collId === null) {
        throw new Error("Missing the required parameter 'collId' when calling appApiVintagesGetListRaw");
      }

      let pathParams = {
        'collId': collId
      };
      let queryParams = {
        'tsid': opts['tsid'],
        'realtime': opts['realtime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VintageSummary];
      return this.apiClient.callApi(
        '/raw/vintage/{collId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiVintagesGetRaw operation.
     * @callback module:api/RawVintageApi~appApiVintagesGetRawCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vintage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a vintage tag with metadata
     * Retrieve a vintage tag with metadata
     * @param {String} collId collection id
     * @param {String} vid vintage id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.meta should include vintage metadata
     * @param {module:api/RawVintageApi~appApiVintagesGetRawCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vintage}
     */
    appApiVintagesGetRaw(collId, vid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collId' is set
      if (collId === undefined || collId === null) {
        throw new Error("Missing the required parameter 'collId' when calling appApiVintagesGetRaw");
      }
      // verify the required parameter 'vid' is set
      if (vid === undefined || vid === null) {
        throw new Error("Missing the required parameter 'vid' when calling appApiVintagesGetRaw");
      }

      let pathParams = {
        'collId': collId,
        'vid': vid
      };
      let queryParams = {
        'meta': opts['meta']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vintage;
      return this.apiClient.callApi(
        '/raw/vintage/{collId}/{vid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiVintagesObjectHistoryRaw operation.
     * @callback module:api/RawVintageApi~appApiVintagesObjectHistoryRawCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VintageHistorical>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * History of vintage by tag id
     * History of vintage by tag id
     * @param {String} collId collection id
     * @param {String} vid vintage id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.realStart start time from when values were valid
     * @param {Date} opts.realEnd end time until when values were valid
     * @param {module:api/RawVintageApi~appApiVintagesObjectHistoryRawCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VintageHistorical>}
     */
    appApiVintagesObjectHistoryRaw(collId, vid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collId' is set
      if (collId === undefined || collId === null) {
        throw new Error("Missing the required parameter 'collId' when calling appApiVintagesObjectHistoryRaw");
      }
      // verify the required parameter 'vid' is set
      if (vid === undefined || vid === null) {
        throw new Error("Missing the required parameter 'vid' when calling appApiVintagesObjectHistoryRaw");
      }

      let pathParams = {
        'collId': collId,
        'vid': vid
      };
      let queryParams = {
        'realStart': opts['realStart'],
        'realEnd': opts['realEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VintageHistorical];
      return this.apiClient.callApi(
        '/raw/vintage/{collId}/{vid}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiVintagesPutRaw operation.
     * @callback module:api/RawVintageApi~appApiVintagesPutRawCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VintageSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update vintage tag
     * Update a vintage tag for a revision of a time series. Vintage tag is a human-friendly label assigned to datetime when revision was recorded. Vintages are unique within the collection
     * @param {String} collId collection id
     * @param {String} vid vintage id
     * @param {module:model/VintageUpdate} vintageUpdate vintage tag
     * @param {module:api/RawVintageApi~appApiVintagesPutRawCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VintageSummary}
     */
    appApiVintagesPutRaw(collId, vid, vintageUpdate, callback) {
      let postBody = vintageUpdate;
      // verify the required parameter 'collId' is set
      if (collId === undefined || collId === null) {
        throw new Error("Missing the required parameter 'collId' when calling appApiVintagesPutRaw");
      }
      // verify the required parameter 'vid' is set
      if (vid === undefined || vid === null) {
        throw new Error("Missing the required parameter 'vid' when calling appApiVintagesPutRaw");
      }
      // verify the required parameter 'vintageUpdate' is set
      if (vintageUpdate === undefined || vintageUpdate === null) {
        throw new Error("Missing the required parameter 'vintageUpdate' when calling appApiVintagesPutRaw");
      }

      let pathParams = {
        'collId': collId,
        'vid': vid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VintageSummary;
      return this.apiClient.callApi(
        '/raw/vintage/{collId}/{vid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
