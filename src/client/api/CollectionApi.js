/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Collection from '../model/Collection';
import CollectionSummary from '../model/CollectionSummary';

/**
* Collection service.
* @module api/CollectionApi
* @version 0.1
*/
export default class CollectionApi {

    /**
    * Constructs a new CollectionApi. 
    * @alias module:api/CollectionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiCollectionDelete operation.
     * @callback module:api/CollectionApi~appApiCollectionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a collection
     * Delete a space
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {module:api/CollectionApi~appApiCollectionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiCollectionDelete(spaceName, collName, callback) {
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiCollectionDelete");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiCollectionDelete");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/collection/{space_name}/{coll_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiCollectionGet operation.
     * @callback module:api/CollectionApi~appApiCollectionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection details
     * Get collection details
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {module:api/CollectionApi~appApiCollectionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    appApiCollectionGet(spaceName, collName, callback) {
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiCollectionGet");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiCollectionGet");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/collection/{space_name}/{coll_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiCollectionGetList operation.
     * @callback module:api/CollectionApi~appApiCollectionGetListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CollectionSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list collections
     * @param {String} spaceName space name
     * @param {Object} opts Optional parameters
     * @param {String} opts.query Search query
     * @param {module:api/CollectionApi~appApiCollectionGetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CollectionSummary>}
     */
    appApiCollectionGetList(spaceName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiCollectionGetList");
      }

      let pathParams = {
        'space_name': spaceName
      };
      let queryParams = {
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CollectionSummary];
      return this.apiClient.callApi(
        '/collection/{space_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiCollectionNameHistory operation.
     * @callback module:api/CollectionApi~appApiCollectionNameHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve historical values of collection details
     * Retrieve historical values of collection details
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {Object} opts Optional parameters
     * @param {Date} opts.realStart start time from when values were valid
     * @param {Date} opts.realEnd end time until when values were valid
     * @param {module:api/CollectionApi~appApiCollectionNameHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    appApiCollectionNameHistory(spaceName, collName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiCollectionNameHistory");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiCollectionNameHistory");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName
      };
      let queryParams = {
        'realStart': opts['realStart'],
        'realEnd': opts['realEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/collection/{space_name}/{coll_name}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiCollectionPost operation.
     * @callback module:api/CollectionApi~appApiCollectionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new collection
     * Create a new collection
     * @param {String} spaceName space name
     * @param {module:model/Collection} collection Definition of collection
     * @param {module:api/CollectionApi~appApiCollectionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    appApiCollectionPost(spaceName, collection, callback) {
      let postBody = collection;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiCollectionPost");
      }
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling appApiCollectionPost");
      }

      let pathParams = {
        'space_name': spaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/collection/{space_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiCollectionPut operation.
     * @callback module:api/CollectionApi~appApiCollectionPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing collection
     * Update an existing collection
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {module:model/Collection} collection ok
     * @param {module:api/CollectionApi~appApiCollectionPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    appApiCollectionPut(spaceName, collName, collection, callback) {
      let postBody = collection;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiCollectionPut");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiCollectionPut");
      }
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling appApiCollectionPut");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/collection/{space_name}/{coll_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
