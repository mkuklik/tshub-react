/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TimeSeries from '../model/TimeSeries';
import TimeSeriesSummary from '../model/TimeSeriesSummary';
import TimeSeriesUpdate from '../model/TimeSeriesUpdate';

/**
* TimeSeries service.
* @module api/TimeSeriesApi
* @version 0.1
*/
export default class TimeSeriesApi {

    /**
    * Constructs a new TimeSeriesApi. 
    * @alias module:api/TimeSeriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiTimeseriesDelete operation.
     * @callback module:api/TimeSeriesApi~appApiTimeseriesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a time series
     * delete time series
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {String} name a single series name
     * @param {module:api/TimeSeriesApi~appApiTimeseriesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiTimeseriesDelete(spaceName, collName, name, callback) {
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiTimeseriesDelete");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiTimeseriesDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appApiTimeseriesDelete");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/timeseries/{space_name}/{coll_name}/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiTimeseriesGet operation.
     * @callback module:api/TimeSeriesApi~appApiTimeseriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeSeries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve time series info
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {String} name a single series name
     * @param {module:api/TimeSeriesApi~appApiTimeseriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeSeries}
     */
    appApiTimeseriesGet(spaceName, collName, name, callback) {
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiTimeseriesGet");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiTimeseriesGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appApiTimeseriesGet");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimeSeries;
      return this.apiClient.callApi(
        '/timeseries/{space_name}/{coll_name}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiTimeseriesGetList operation.
     * @callback module:api/TimeSeriesApi~appApiTimeseriesGetListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimeSeriesSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List time series in a collection
     * List time series in a collection
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {module:api/TimeSeriesApi~appApiTimeseriesGetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimeSeriesSummary>}
     */
    appApiTimeseriesGetList(spaceName, collName, callback) {
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiTimeseriesGetList");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiTimeseriesGetList");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TimeSeriesSummary];
      return this.apiClient.callApi(
        '/timeseries/{space_name}/{coll_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiTimeseriesNameHistory operation.
     * @callback module:api/TimeSeriesApi~appApiTimeseriesNameHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrive historical values
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {String} name a single series name
     * @param {Object} opts Optional parameters
     * @param {Date} opts.realStart start time from when values were valid
     * @param {Date} opts.realEnd end time until when values were valid
     * @param {module:api/TimeSeriesApi~appApiTimeseriesNameHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    appApiTimeseriesNameHistory(spaceName, collName, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiTimeseriesNameHistory");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiTimeseriesNameHistory");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appApiTimeseriesNameHistory");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName,
        'name': name
      };
      let queryParams = {
        'realStart': opts['realStart'],
        'realEnd': opts['realEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/timeseries/{space_name}/{coll_name}/{name}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiTimeseriesPost operation.
     * @callback module:api/TimeSeriesApi~appApiTimeseriesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeSeries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new time series
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {module:model/TimeSeries} timeSeries Time series parameters. dtype and freq are required
     * @param {module:api/TimeSeriesApi~appApiTimeseriesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeSeries}
     */
    appApiTimeseriesPost(spaceName, collName, timeSeries, callback) {
      let postBody = timeSeries;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiTimeseriesPost");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiTimeseriesPost");
      }
      // verify the required parameter 'timeSeries' is set
      if (timeSeries === undefined || timeSeries === null) {
        throw new Error("Missing the required parameter 'timeSeries' when calling appApiTimeseriesPost");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TimeSeries;
      return this.apiClient.callApi(
        '/timeseries/{space_name}/{coll_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiTimeseriesPut operation.
     * @callback module:api/TimeSeriesApi~appApiTimeseriesPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeSeries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing time series info
     * Update existing time series info
     * @param {String} spaceName space name
     * @param {String} collName collection name
     * @param {String} name a single series name
     * @param {module:model/TimeSeriesUpdate} timeSeriesUpdate Time series updated info
     * @param {module:api/TimeSeriesApi~appApiTimeseriesPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeSeries}
     */
    appApiTimeseriesPut(spaceName, collName, name, timeSeriesUpdate, callback) {
      let postBody = timeSeriesUpdate;
      // verify the required parameter 'spaceName' is set
      if (spaceName === undefined || spaceName === null) {
        throw new Error("Missing the required parameter 'spaceName' when calling appApiTimeseriesPut");
      }
      // verify the required parameter 'collName' is set
      if (collName === undefined || collName === null) {
        throw new Error("Missing the required parameter 'collName' when calling appApiTimeseriesPut");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appApiTimeseriesPut");
      }
      // verify the required parameter 'timeSeriesUpdate' is set
      if (timeSeriesUpdate === undefined || timeSeriesUpdate === null) {
        throw new Error("Missing the required parameter 'timeSeriesUpdate' when calling appApiTimeseriesPut");
      }

      let pathParams = {
        'space_name': spaceName,
        'coll_name': collName,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TimeSeries;
      return this.apiClient.callApi(
        '/timeseries/{space_name}/{coll_name}/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
