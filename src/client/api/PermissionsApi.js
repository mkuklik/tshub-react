/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ObjectType from '../model/ObjectType';
import Policy from '../model/Policy';
import PolicyUpdate from '../model/PolicyUpdate';

/**
* Permissions service.
* @module api/PermissionsApi
* @version 0.1
*/
export default class PermissionsApi {

    /**
    * Constructs a new PermissionsApi. 
    * @alias module:api/PermissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiPermissionGet operation.
     * @callback module:api/PermissionsApi~appApiPermissionGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Policy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List permissions for object
     * List explicit permissions for object
     * @param {Object} opts Optional parameters
     * @param {String} opts.spaceId space id
     * @param {String} opts.collId collection id
     * @param {String} opts.tsid time series id
     * @param {module:api/PermissionsApi~appApiPermissionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Policy>}
     */
    appApiPermissionGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'space_id': opts['spaceId'],
        'coll_id': opts['collId'],
        'tsid': opts['tsid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Policy];
      return this.apiClient.callApi(
        '/raw/permissions/object', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiPermissionRemovePermission operation.
     * @callback module:api/PermissionsApi~appApiPermissionRemovePermissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete permission
     * delete permission
     * @param {module:model/ObjectType} objType object
     * @param {Boolean} subobject subobject mark
     * @param {String} action action can be Verb or Role
     * @param {module:model/String} effect permission effect
     * @param {Object} opts Optional parameters
     * @param {String} opts.uid user id
     * @param {String} opts.gid group id
     * @param {String} opts.spaceId space id
     * @param {String} opts.collId collection id
     * @param {String} opts.tsid time series id
     * @param {module:api/PermissionsApi~appApiPermissionRemovePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiPermissionRemovePermission(objType, subobject, action, effect, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objType' is set
      if (objType === undefined || objType === null) {
        throw new Error("Missing the required parameter 'objType' when calling appApiPermissionRemovePermission");
      }
      // verify the required parameter 'subobject' is set
      if (subobject === undefined || subobject === null) {
        throw new Error("Missing the required parameter 'subobject' when calling appApiPermissionRemovePermission");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling appApiPermissionRemovePermission");
      }
      // verify the required parameter 'effect' is set
      if (effect === undefined || effect === null) {
        throw new Error("Missing the required parameter 'effect' when calling appApiPermissionRemovePermission");
      }

      let pathParams = {
      };
      let queryParams = {
        'uid': opts['uid'],
        'gid': opts['gid'],
        'obj_type': objType,
        'subobject': subobject,
        'space_id': opts['spaceId'],
        'coll_id': opts['collId'],
        'tsid': opts['tsid'],
        'action': action,
        'effect': effect
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/raw/permissions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiPermissionSetPermission operation.
     * @callback module:api/PermissionsApi~appApiPermissionSetPermissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set permissions
     * Set permissions
     * @param {module:model/PolicyUpdate} policyUpdate Policy definition
     * @param {module:api/PermissionsApi~appApiPermissionSetPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiPermissionSetPermission(policyUpdate, callback) {
      let postBody = policyUpdate;
      // verify the required parameter 'policyUpdate' is set
      if (policyUpdate === undefined || policyUpdate === null) {
        throw new Error("Missing the required parameter 'policyUpdate' when calling appApiPermissionSetPermission");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/raw/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
