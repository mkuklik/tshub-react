/**
 * ChronosDB swagger
 * ChronosDB time series database API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: apiteam@chronosdb.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IndexFormat from '../model/IndexFormat';
import RawDataDeleteResponse from '../model/RawDataDeleteResponse';
import RawDataPutRequest from '../model/RawDataPutRequest';
import RawDataPutResponse from '../model/RawDataPutResponse';
import RawSingleTimeSeriesData from '../model/RawSingleTimeSeriesData';

/**
* RawTimeSeriesData service.
* @module api/RawTimeSeriesDataApi
* @version 0.1
*/
export default class RawTimeSeriesDataApi {

    /**
    * Constructs a new RawTimeSeriesDataApi. 
    * @alias module:api/RawTimeSeriesDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiRawTimeseriesDataDelete operation.
     * @callback module:api/RawTimeSeriesDataApi~appApiRawTimeseriesDataDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RawDataDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete observations, for internal use only
     * Delete observations from a time series, for internal use only
     * @param {String} collId collection id
     * @param {Array.<Number>} index time series index
     * @param {module:model/IndexFormat} indexFormat 
     * @param {Object} opts Optional parameters
     * @param {String} opts.tsid time series id
     * @param {module:api/RawTimeSeriesDataApi~appApiRawTimeseriesDataDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RawDataDeleteResponse}
     */
    appApiRawTimeseriesDataDelete(collId, index, indexFormat, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collId' is set
      if (collId === undefined || collId === null) {
        throw new Error("Missing the required parameter 'collId' when calling appApiRawTimeseriesDataDelete");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling appApiRawTimeseriesDataDelete");
      }
      // verify the required parameter 'indexFormat' is set
      if (indexFormat === undefined || indexFormat === null) {
        throw new Error("Missing the required parameter 'indexFormat' when calling appApiRawTimeseriesDataDelete");
      }

      let pathParams = {
        'collId': collId
      };
      let queryParams = {
        'tsid': opts['tsid'],
        'index': this.apiClient.buildCollectionParam(index, 'multi'),
        'indexFormat': indexFormat
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RawDataDeleteResponse;
      return this.apiClient.callApi(
        '/raw/data/{collId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiRawTimeseriesDataGet operation.
     * @callback module:api/RawTimeSeriesDataApi~appApiRawTimeseriesDataGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: RawSingleTimeSeriesData}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve raw time series data, for internal use only
     * Retrieve raw time series data, for internal use only
     * @param {String} collId collection id
     * @param {Array.<String>} tsids array of tsid's in the collection, collId
     * @param {Object} opts Optional parameters
     * @param {Date} opts.realtime real time to retrieve the historical data
     * @param {module:api/RawTimeSeriesDataApi~appApiRawTimeseriesDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: RawSingleTimeSeriesData}>}
     */
    appApiRawTimeseriesDataGet(collId, tsids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collId' is set
      if (collId === undefined || collId === null) {
        throw new Error("Missing the required parameter 'collId' when calling appApiRawTimeseriesDataGet");
      }
      // verify the required parameter 'tsids' is set
      if (tsids === undefined || tsids === null) {
        throw new Error("Missing the required parameter 'tsids' when calling appApiRawTimeseriesDataGet");
      }

      let pathParams = {
        'collId': collId
      };
      let queryParams = {
        'tsids': this.apiClient.buildCollectionParam(tsids, 'multi'),
        'realtime': opts['realtime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': RawSingleTimeSeriesData};
      return this.apiClient.callApi(
        '/raw/data/{collId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiRawTimeseriesDataPut operation.
     * @callback module:api/RawTimeSeriesDataApi~appApiRawTimeseriesDataPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RawDataPutResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save raw observations, for internal use only
     * Save raw observations of time series, for internal use only
     * @param {String} collId collection id
     * @param {module:model/String} method data type is one of the following * `overwrite` overwrite entire series * `update`    update exisitng values and add new values * `append`    add only new values ignoring any existing values 
     * @param {module:model/RawDataPutRequest} rawDataPutRequest time series data
     * @param {Object} opts Optional parameters
     * @param {Date} opts.realtime real time at which data was written. This only works if there is no observations written after this real time
     * @param {module:api/RawTimeSeriesDataApi~appApiRawTimeseriesDataPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RawDataPutResponse}
     */
    appApiRawTimeseriesDataPut(collId, method, rawDataPutRequest, opts, callback) {
      opts = opts || {};
      let postBody = rawDataPutRequest;
      // verify the required parameter 'collId' is set
      if (collId === undefined || collId === null) {
        throw new Error("Missing the required parameter 'collId' when calling appApiRawTimeseriesDataPut");
      }
      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling appApiRawTimeseriesDataPut");
      }
      // verify the required parameter 'rawDataPutRequest' is set
      if (rawDataPutRequest === undefined || rawDataPutRequest === null) {
        throw new Error("Missing the required parameter 'rawDataPutRequest' when calling appApiRawTimeseriesDataPut");
      }

      let pathParams = {
        'collId': collId
      };
      let queryParams = {
        'method': method,
        'realtime': opts['realtime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RawDataPutResponse;
      return this.apiClient.callApi(
        '/raw/data/{collId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
