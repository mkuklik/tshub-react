/**
 * FRED API
 * API for accessing economic data from the Federal Reserve Economic Data (FRED) database.
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Categories from '../model/Categories';
import Observations from '../model/Observations';
import Releases from '../model/Releases';
import Seriess from '../model/Seriess';
import Tags from '../model/Tags';
import VintageDates from '../model/VintageDates';

/**
* Series service.
* @module api/SeriesApi
* @version 1.0.2
*/
export default class SeriesApi {

    /**
    * Constructs a new SeriesApi. 
    * @alias module:api/SeriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSeries operation.
     * @callback module:api/SeriesApi~getSeriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Seriess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [description] Get an economic data series.
     * @param {String} [apiKey] Read API Keys for more information.
     * @param {String} [fileType] A key or file extension that indicates the type of file to send.
     * @param {String} [seriesId] The id for a series.
     * @param {String} [realtimeStart] The start of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [realtimeEnd] The end of the real-time period. For more information, see Real-Time Periods.
     * @param {module:api/SeriesApi~getSeriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Seriess}
     */
    getSeries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Description:': opts['description'],
        'api_key': opts['apiKey'],
        'file_type': opts['fileType'],
        'series_id': opts['seriesId'],
        'realtime_start': opts['realtimeStart'],
        'realtime_end': opts['realtimeEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Seriess;
      return this.apiClient.callApi(
        '/fred/series', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeriesCategories operation.
     * @callback module:api/SeriesApi~getSeriesCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Categories} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [description] Get an economic data series.
     * @param {String} [apiKey] Read API Keys for more information.
     * @param {String} [fileType] A key or file extension that indicates the type of file to send.
     * @param {String} [seriesId] The id for a series.
     * @param {String} [realtimeStart] The start of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [realtimeEnd] The end of the real-time period. For more information, see Real-Time Periods.
     * @param {module:api/SeriesApi~getSeriesCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Categories}
     */
    getSeriesCategories(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Description:': opts['description'],
        'api_key': opts['apiKey'],
        'file_type': opts['fileType'],
        'series_id': opts['seriesId'],
        'realtime_start': opts['realtimeStart'],
        'realtime_end': opts['realtimeEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Categories;
      return this.apiClient.callApi(
        '/fred/series/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeriesObservations operation.
     * @callback module:api/SeriesApi~getSeriesObservationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Observations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [description] Get the observations or data values for an economic data series.
     * @param {String} [apiKey] Read API Keys for more information.
     * @param {String} [fileType] A key or file extension that indicates the type of file to send.
     * @param {String} [seriesId] The id for a series.
     * @param {String} [realtimeStart] The start of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [realtimeEnd] The end of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [limit] The maximum number of results to return.
     * @param {Number} [offset] non-negative integer, optional, default: 0
     * @param {String} [sortOrder] Sort results is ascending or descending observation_date order.
     * @param {String} [observationStart] The start of the observation period.
     * @param {String} [observationEnd] The end of the observation period.
     * @param {String} [units] A key that indicates a data value transformation.
     * @param {Number} [frequency] An optional parameter that indicates a lower frequency to aggregate values to. The FRED frequency aggregation feature converts higher frequency data series into lower frequency data series (e.g. converts a monthly data series into an annual data series). In FRED, the highest frequency data is daily, and the lowest frequency data is annual. There are 3 aggregation methods available- average, sum, and end of period. See the aggregation_method parameter.
     * @param {String} [aggregationMethod] A key that indicates the aggregation method used for frequency aggregation. This parameter has no affect if the frequency parameter is not set.
     * @param {Number} [outputType] An integer that indicates an output type.
     * @param {String} [vintageDates] Vintage dates are used to download data as it existed on these specified dates in history. Vintage dates can be specified instead of a real-time period using realtime_start and realtime_end.
     * @param {module:api/SeriesApi~getSeriesObservationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Observations}
     */
    getSeriesObservations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Description': opts['description'],
        'api_key': opts['apiKey'],
        'file_type': opts['fileType'],
        'series_id': opts['seriesId'],
        'realtime_start': opts['realtimeStart'],
        'realtime_end': opts['realtimeEnd'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort_order': opts['sortOrder'],
        'observation_start': opts['observationStart'],
        'observation_end': opts['observationEnd'],
        'units': opts['units'],
        'frequency': opts['frequency'],
        'aggregation_method': opts['aggregationMethod'],
        'output_type': opts['outputType'],
        'vintage_dates': opts['vintageDates']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Observations;
      return this.apiClient.callApi(
        '/fred/series/observations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeriesRelease operation.
     * @callback module:api/SeriesApi~getSeriesReleaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Releases} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [description] Get the observations or data values for an economic data series.
     * @param {String} [apiKey] Read API Keys for more information.
     * @param {String} [fileType] A key or file extension that indicates the type of file to send.
     * @param {String} [seriesId] The id for a series.
     * @param {String} [realtimeStart] The start of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [realtimeEnd] The end of the real-time period. For more information, see Real-Time Periods.
     * @param {module:api/SeriesApi~getSeriesReleaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Releases}
     */
    getSeriesRelease(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Description': opts['description'],
        'api_key': opts['apiKey'],
        'file_type': opts['fileType'],
        'series_id': opts['seriesId'],
        'realtime_start': opts['realtimeStart'],
        'realtime_end': opts['realtimeEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Releases;
      return this.apiClient.callApi(
        '/fred/series/release', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeriesSearch operation.
     * @callback module:api/SeriesApi~getSeriesSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Seriess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [description] Get the observations or data values for an economic data series.
     * @param {String} [apiKey] Read API Keys for more information.
     * @param {String} [fileType] A key or file extension that indicates the type of file to send.
     * @param {String} [searchText] The words to match against economic data series.
     * @param {String} [searchType] Determines the type of search to perform.
     * @param {String} [realtimeStart] The start of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [realtimeEnd] The end of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [limit] The maximum number of results to return.
     * @param {Number} [offset] non-negative integer, optional, default: 0
     * @param {String} [orderBy] Order results by values of the specified attribute.
     * @param {String} [sortOrder] Sort results is ascending or descending observation_date order.
     * @param {String} [filterVariable] The attribute to filter results by.
     * @param {String} [filterValue] The value of the filter_variable attribute to filter results by.
     * @param {String} [tagNames] A semicolon delimited list of tag names that series match all of.
     * @param {String} [excludeTagNames] A semicolon delimited list of tag names that series match none of.
     * @param {module:api/SeriesApi~getSeriesSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Seriess}
     */
    getSeriesSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Description': opts['description'],
        'api_key': opts['apiKey'],
        'file_type': opts['fileType'],
        'search_text': opts['searchText'],
        'search_type': opts['searchType'],
        'realtime_start': opts['realtimeStart'],
        'realtime_end': opts['realtimeEnd'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order_by': opts['orderBy'],
        'sort_order': opts['sortOrder'],
        'filter_variable': opts['filterVariable'],
        'filter_value': opts['filterValue'],
        'tag_names': opts['tagNames'],
        'exclude_tag_names': opts['excludeTagNames']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Seriess;
      return this.apiClient.callApi(
        '/fred/series/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeriesSearchRelatedTags operation.
     * @callback module:api/SeriesApi~getSeriesSearchRelatedTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tags} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [description] Get the observations or data values for an economic data series.
     * @param {String} [apiKey] Read API Keys for more information.
     * @param {String} [fileType] A key or file extension that indicates the type of file to send.
     * @param {String} [seriesSearchText] The words to match against economic data series.
     * @param {String} [realtimeStart] The start of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [realtimeEnd] The end of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [tagNames] A semicolon delimited list of tag names that series match all of.
     * @param {String} [excludeTagNames] A semicolon delimited list of tag names that series match none of.
     * @param {String} [tagGroupId] A tag group id to filter tags by type.
     * @param {String} [tagSearchText] The words to find matching tags with.
     * @param {String} [limit] The maximum number of results to return.
     * @param {Number} [offset] non-negative integer, optional, default: 0
     * @param {String} [orderBy] Order results by values of the specified attribute.
     * @param {String} [sortOrder] Sort results is ascending or descending observation_date order.
     * @param {module:api/SeriesApi~getSeriesSearchRelatedTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tags}
     */
    getSeriesSearchRelatedTags(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Description': opts['description'],
        'api_key': opts['apiKey'],
        'file_type': opts['fileType'],
        'series_search_text': opts['seriesSearchText'],
        'realtime_start': opts['realtimeStart'],
        'realtime_end': opts['realtimeEnd'],
        'tag_names': opts['tagNames'],
        'exclude_tag_names': opts['excludeTagNames'],
        'tag_group_id': opts['tagGroupId'],
        'tag_search_text': opts['tagSearchText'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order_by': opts['orderBy'],
        'sort_order': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tags;
      return this.apiClient.callApi(
        '/fred/series/search/related_tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeriesSearchTags operation.
     * @callback module:api/SeriesApi~getSeriesSearchTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tags} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [description] Get the observations or data values for an economic data series.
     * @param {String} [apiKey] Read API Keys for more information.
     * @param {String} [fileType] A key or file extension that indicates the type of file to send.
     * @param {String} [seriesSearchText] The words to match against economic data series.
     * @param {String} [realtimeStart] The start of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [realtimeEnd] The end of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [tagNames] A semicolon delimited list of tag names that series match all of.
     * @param {String} [tagGroupId] A tag group id to filter tags by type.
     * @param {String} [tagSearchText] The words to find matching tags with.
     * @param {String} [limit] The maximum number of results to return.
     * @param {Number} [offset] non-negative integer, optional, default: 0
     * @param {String} [orderBy] Order results by values of the specified attribute.
     * @param {String} [sortOrder] Sort results is ascending or descending observation_date order.
     * @param {module:api/SeriesApi~getSeriesSearchTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tags}
     */
    getSeriesSearchTags(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Description': opts['description'],
        'api_key': opts['apiKey'],
        'file_type': opts['fileType'],
        'series_search_text': opts['seriesSearchText'],
        'realtime_start': opts['realtimeStart'],
        'realtime_end': opts['realtimeEnd'],
        'tag_names': opts['tagNames'],
        'tag_group_id': opts['tagGroupId'],
        'tag_search_text': opts['tagSearchText'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order_by': opts['orderBy'],
        'sort_order': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tags;
      return this.apiClient.callApi(
        '/fred/series/search/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeriesTags operation.
     * @callback module:api/SeriesApi~getSeriesTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tags} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [description] Get the observations or data values for an economic data series.
     * @param {String} [apiKey] Read API Keys for more information.
     * @param {String} [fileType] A key or file extension that indicates the type of file to send.
     * @param {String} [seriesId] The id for a series.
     * @param {String} [realtimeStart] The start of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [realtimeEnd] The end of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [orderBy] Order results by values of the specified attribute.
     * @param {String} [sortOrder] Sort results is ascending or descending observation_date order.
     * @param {module:api/SeriesApi~getSeriesTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tags}
     */
    getSeriesTags(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Description': opts['description'],
        'api_key': opts['apiKey'],
        'file_type': opts['fileType'],
        'series_id': opts['seriesId'],
        'realtime_start': opts['realtimeStart'],
        'realtime_end': opts['realtimeEnd'],
        'order_by': opts['orderBy'],
        'sort_order': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tags;
      return this.apiClient.callApi(
        '/fred/series/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeriesUpdates operation.
     * @callback module:api/SeriesApi~getSeriesUpdatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Seriess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [description] Get the observations or data values for an economic data series.
     * @param {String} [apiKey] Read API Keys for more information.
     * @param {String} [fileType] A key or file extension that indicates the type of file to send.
     * @param {String} [realtimeStart] The start of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [realtimeEnd] The end of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [limit] The maximum number of results to return.
     * @param {Number} [offset] non-negative integer, optional, default: 0
     * @param {String} [filterValue] The value of the filter_variable attribute to filter results by.
     * @param {String} [startTime] Start time for limiting results for a time range, can filter down to minutes
     * @param {String} [endTime] End time for limiting results for a time range, can filter down to minutes
     * @param {module:api/SeriesApi~getSeriesUpdatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Seriess}
     */
    getSeriesUpdates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Description': opts['description'],
        'api_key': opts['apiKey'],
        'file_type': opts['fileType'],
        'realtime_start': opts['realtimeStart'],
        'realtime_end': opts['realtimeEnd'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter_value': opts['filterValue'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Seriess;
      return this.apiClient.callApi(
        '/fred/series/updates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeriesVintagedates operation.
     * @callback module:api/SeriesApi~getSeriesVintagedatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VintageDates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [description] Get the observations or data values for an economic data series.
     * @param {String} [apiKey] Read API Keys for more information.
     * @param {String} [fileType] A key or file extension that indicates the type of file to send.
     * @param {String} [seriesId] The id for a series.
     * @param {String} [realtimeStart] The start of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [realtimeEnd] The end of the real-time period. For more information, see Real-Time Periods.
     * @param {String} [limit] The maximum number of results to return.
     * @param {Number} [offset] non-negative integer, optional, default: 0
     * @param {module:api/SeriesApi~getSeriesVintagedatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VintageDates}
     */
    getSeriesVintagedates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Description': opts['description'],
        'api_key': opts['apiKey'],
        'file_type': opts['fileType'],
        'series_id': opts['seriesId'],
        'realtime_start': opts['realtimeStart'],
        'realtime_end': opts['realtimeEnd'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VintageDates;
      return this.apiClient.callApi(
        '/fred/series/vintagedates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
