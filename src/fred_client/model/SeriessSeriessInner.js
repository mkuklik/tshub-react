/**
 * FRED API
 * API for accessing economic data from the Federal Reserve Economic Data (FRED) database.
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SeriessSeriessInner model module.
 * @module model/SeriessSeriessInner
 * @version 1.0.2
 */
class SeriessSeriessInner {
    /**
     * Constructs a new <code>SeriessSeriessInner</code>.
     * @alias module:model/SeriessSeriessInner
     */
    constructor() { 
        
        SeriessSeriessInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SeriessSeriessInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SeriessSeriessInner} obj Optional instance to populate.
     * @return {module:model/SeriessSeriessInner} The populated <code>SeriessSeriessInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SeriessSeriessInner();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('realtime_start')) {
                obj['realtime_start'] = ApiClient.convertToType(data['realtime_start'], 'Date');
            }
            if (data.hasOwnProperty('realtime_end')) {
                obj['realtime_end'] = ApiClient.convertToType(data['realtime_end'], 'Date');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('observation_start')) {
                obj['observation_start'] = ApiClient.convertToType(data['observation_start'], 'Date');
            }
            if (data.hasOwnProperty('observation_end')) {
                obj['observation_end'] = ApiClient.convertToType(data['observation_end'], 'Date');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('frequency_short')) {
                obj['frequency_short'] = ApiClient.convertToType(data['frequency_short'], 'String');
            }
            if (data.hasOwnProperty('units')) {
                obj['units'] = ApiClient.convertToType(data['units'], 'String');
            }
            if (data.hasOwnProperty('units_short')) {
                obj['units_short'] = ApiClient.convertToType(data['units_short'], 'String');
            }
            if (data.hasOwnProperty('seasonal_adjustment')) {
                obj['seasonal_adjustment'] = ApiClient.convertToType(data['seasonal_adjustment'], 'String');
            }
            if (data.hasOwnProperty('seasonal_adjustment_short')) {
                obj['seasonal_adjustment_short'] = ApiClient.convertToType(data['seasonal_adjustment_short'], 'String');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'String');
            }
            if (data.hasOwnProperty('popularity')) {
                obj['popularity'] = ApiClient.convertToType(data['popularity'], 'Number');
            }
            if (data.hasOwnProperty('group_popularity')) {
                obj['group_popularity'] = ApiClient.convertToType(data['group_popularity'], 'Number');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SeriessSeriessInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SeriessSeriessInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['frequency'] && !(typeof data['frequency'] === 'string' || data['frequency'] instanceof String)) {
            throw new Error("Expected the field `frequency` to be a primitive type in the JSON string but got " + data['frequency']);
        }
        // ensure the json data is a string
        if (data['frequency_short'] && !(typeof data['frequency_short'] === 'string' || data['frequency_short'] instanceof String)) {
            throw new Error("Expected the field `frequency_short` to be a primitive type in the JSON string but got " + data['frequency_short']);
        }
        // ensure the json data is a string
        if (data['units'] && !(typeof data['units'] === 'string' || data['units'] instanceof String)) {
            throw new Error("Expected the field `units` to be a primitive type in the JSON string but got " + data['units']);
        }
        // ensure the json data is a string
        if (data['units_short'] && !(typeof data['units_short'] === 'string' || data['units_short'] instanceof String)) {
            throw new Error("Expected the field `units_short` to be a primitive type in the JSON string but got " + data['units_short']);
        }
        // ensure the json data is a string
        if (data['seasonal_adjustment'] && !(typeof data['seasonal_adjustment'] === 'string' || data['seasonal_adjustment'] instanceof String)) {
            throw new Error("Expected the field `seasonal_adjustment` to be a primitive type in the JSON string but got " + data['seasonal_adjustment']);
        }
        // ensure the json data is a string
        if (data['seasonal_adjustment_short'] && !(typeof data['seasonal_adjustment_short'] === 'string' || data['seasonal_adjustment_short'] instanceof String)) {
            throw new Error("Expected the field `seasonal_adjustment_short` to be a primitive type in the JSON string but got " + data['seasonal_adjustment_short']);
        }
        // ensure the json data is a string
        if (data['last_updated'] && !(typeof data['last_updated'] === 'string' || data['last_updated'] instanceof String)) {
            throw new Error("Expected the field `last_updated` to be a primitive type in the JSON string but got " + data['last_updated']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
SeriessSeriessInner.prototype['id'] = undefined;

/**
 * @member {Date} realtime_start
 */
SeriessSeriessInner.prototype['realtime_start'] = undefined;

/**
 * @member {Date} realtime_end
 */
SeriessSeriessInner.prototype['realtime_end'] = undefined;

/**
 * @member {String} title
 */
SeriessSeriessInner.prototype['title'] = undefined;

/**
 * @member {Date} observation_start
 */
SeriessSeriessInner.prototype['observation_start'] = undefined;

/**
 * @member {Date} observation_end
 */
SeriessSeriessInner.prototype['observation_end'] = undefined;

/**
 * @member {String} frequency
 */
SeriessSeriessInner.prototype['frequency'] = undefined;

/**
 * @member {String} frequency_short
 */
SeriessSeriessInner.prototype['frequency_short'] = undefined;

/**
 * @member {String} units
 */
SeriessSeriessInner.prototype['units'] = undefined;

/**
 * @member {String} units_short
 */
SeriessSeriessInner.prototype['units_short'] = undefined;

/**
 * @member {String} seasonal_adjustment
 */
SeriessSeriessInner.prototype['seasonal_adjustment'] = undefined;

/**
 * @member {String} seasonal_adjustment_short
 */
SeriessSeriessInner.prototype['seasonal_adjustment_short'] = undefined;

/**
 * @member {String} last_updated
 */
SeriessSeriessInner.prototype['last_updated'] = undefined;

/**
 * @member {Number} popularity
 */
SeriessSeriessInner.prototype['popularity'] = undefined;

/**
 * @member {Number} group_popularity
 */
SeriessSeriessInner.prototype['group_popularity'] = undefined;

/**
 * @member {String} notes
 */
SeriessSeriessInner.prototype['notes'] = undefined;






export default SeriessSeriessInner;

